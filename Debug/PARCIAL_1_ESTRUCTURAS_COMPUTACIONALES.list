
PARCIAL_1_ESTRUCTURAS_COMPUTACIONALES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006410  08006410  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000068  08006480  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08006480  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114e6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253d  00000000  00000000  000315c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00033b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c78  00000000  00000000  00034b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a84  00000000  00000000  00035778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cc0  00000000  00000000  0005d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4419  00000000  00000000  0006febc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a88  00000000  00000000  001642d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00168d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006354 	.word	0x08006354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006354 	.word	0x08006354

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)

{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_DMA(&huart2,(uint8_t *)ptr, len);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29b      	uxth	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	68b9      	ldr	r1, [r7, #8]
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <_write+0x24>)
 8000582:	f003 fbcf 	bl	8003d24 <HAL_UART_Transmit_DMA>
  return len;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000d0 	.word	0x200000d0

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fba8 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f846 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f93e 	bl	8000820 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f91e 	bl	80007e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f8ec 	bl	8000784 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005ac:	f000 f890 	bl	80006d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  TIM3->CCR1=70;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <main+0x80>)
 80005b2:	2246      	movs	r2, #70	; 0x46
 80005b4:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);// Inicializamos el PWM para el canal 1
 80005b6:	2100      	movs	r1, #0
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <main+0x84>)
 80005ba:	f002 fce1 	bl	8002f80 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2,rx_duty, 4);// Recibimos los bytes usando el USART2
 80005be:	2204      	movs	r2, #4
 80005c0:	4916      	ldr	r1, [pc, #88]	; (800061c <main+0x88>)
 80005c2:	4817      	ldr	r0, [pc, #92]	; (8000620 <main+0x8c>)
 80005c4:	f003 fb62 	bl	8003c8c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 duty= ((rx_duty[0]-'0')*1000)+((rx_duty[1]-'0')*1000)+((rx_duty[2]-'0')*1000)+((rx_duty[3]-'0')*1000); // Realizamos la conversion de caracter a entero
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <main+0x88>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <main+0x88>)
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	3b30      	subs	r3, #48	; 0x30
 80005d6:	441a      	add	r2, r3
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <main+0x88>)
 80005da:	789b      	ldrb	r3, [r3, #2]
 80005dc:	3b30      	subs	r3, #48	; 0x30
 80005de:	441a      	add	r2, r3
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0x88>)
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	3b30      	subs	r3, #48	; 0x30
 80005e6:	4413      	add	r3, r2
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	0152      	lsls	r2, r2, #5
 80005ee:	1ad2      	subs	r2, r2, r3
 80005f0:	0092      	lsls	r2, r2, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0x90>)
 80005fa:	801a      	strh	r2, [r3, #0]
	 if (duty<0 && duty<99){
	htim3.Instance->CCR1=duty;// Tomamos el valor del pwm
	 }
	 printf("el valor del numero es de:%d",duty);
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0x90>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <main+0x94>)
 8000604:	f005 f832 	bl	800566c <iprintf>
	 HAL_Delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fbea 	bl	8000de4 <HAL_Delay>
	 duty= ((rx_duty[0]-'0')*1000)+((rx_duty[1]-'0')*1000)+((rx_duty[2]-'0')*1000)+((rx_duty[3]-'0')*1000); // Realizamos la conversion de caracter a entero
 8000610:	e7da      	b.n	80005c8 <main+0x34>
 8000612:	bf00      	nop
 8000614:	40000400 	.word	0x40000400
 8000618:	20000084 	.word	0x20000084
 800061c:	200001a4 	.word	0x200001a4
 8000620:	200000d0 	.word	0x200000d0
 8000624:	200001a0 	.word	0x200001a0
 8000628:	0800636c 	.word	0x0800636c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	; 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	; 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 f86b 	bl	8005716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000652:	f001 f92b 	bl	80018ac <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 f932 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067a:	230a      	movs	r3, #10
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067e:	2307      	movs	r3, #7
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f962 	bl	8001958 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800069a:	f000 f913 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd2a 	bl	8002110 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c2:	f000 f8ff 	bl	80008c4 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	; 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_TIM3_Init+0xac>)
 80006f6:	4a22      	ldr	r2, [pc, #136]	; (8000780 <MX_TIM3_Init+0xb0>)
 80006f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_TIM3_Init+0xac>)
 80006fc:	224f      	movs	r2, #79	; 0x4f
 80006fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM3_Init+0xac>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_TIM3_Init+0xac>)
 8000708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800070c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_TIM3_Init+0xac>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM3_Init+0xac>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800071a:	4818      	ldr	r0, [pc, #96]	; (800077c <MX_TIM3_Init+0xac>)
 800071c:	f002 fbd8 	bl	8002ed0 <HAL_TIM_PWM_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000726:	f000 f8cd 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4810      	ldr	r0, [pc, #64]	; (800077c <MX_TIM3_Init+0xac>)
 800073a:	f003 f9d1 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000744:	f000 f8be 	bl	80008c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000748:	2360      	movs	r3, #96	; 0x60
 800074a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <MX_TIM3_Init+0xac>)
 8000760:	f002 fd14 	bl	800318c <HAL_TIM_PWM_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800076a:	f000 f8ab 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <MX_TIM3_Init+0xac>)
 8000770:	f000 f8f2 	bl	8000958 <HAL_TIM_MspPostInit>

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000084 	.word	0x20000084
 8000780:	40000400 	.word	0x40000400

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART2_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c8:	f003 fa12 	bl	8003bf0 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f877 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000d0 	.word	0x200000d0
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_DMA_Init+0x38>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <MX_DMA_Init+0x38>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6493      	str	r3, [r2, #72]	; 0x48
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_DMA_Init+0x38>)
 80007f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2010      	movs	r0, #16
 8000808:	f000 fbeb 	bl	8000fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800080c:	2010      	movs	r0, #16
 800080e:	f000 fc04 	bl	800101a <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <MX_GPIO_Init+0x9c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0x9c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <MX_GPIO_Init+0x9c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <MX_GPIO_Init+0x9c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_GPIO_Init+0x9c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xa0>)
 80008ae:	f000 fe45 	bl	800153c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_TIM_PWM_MspInit+0x38>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10b      	bne.n	8000942 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_TIM_PWM_MspInit+0x3c>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_TIM_PWM_MspInit+0x3c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6593      	str	r3, [r2, #88]	; 0x58
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_TIM_PWM_MspInit+0x3c>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40000400 	.word	0x40000400
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a11      	ldr	r2, [pc, #68]	; (80009bc <HAL_TIM_MspPostInit+0x64>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d11c      	bne.n	80009b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_TIM_MspPostInit+0x68>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_TIM_MspPostInit+0x68>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_TIM_MspPostInit+0x68>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f000 fdc4 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40000400 	.word	0x40000400
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0ac      	sub	sp, #176	; 0xb0
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2288      	movs	r2, #136	; 0x88
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 fe96 	bl	8005716 <memset>
  if(huart->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a3a      	ldr	r2, [pc, #232]	; (8000ad8 <HAL_UART_MspInit+0x114>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d16c      	bne.n	8000ace <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fda9 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a0c:	f7ff ff5a 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	4b32      	ldr	r3, [pc, #200]	; (8000adc <HAL_UART_MspInit+0x118>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a14:	4a31      	ldr	r2, [pc, #196]	; (8000adc <HAL_UART_MspInit+0x118>)
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <HAL_UART_MspInit+0x118>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <HAL_UART_MspInit+0x118>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a2b      	ldr	r2, [pc, #172]	; (8000adc <HAL_UART_MspInit+0x118>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <HAL_UART_MspInit+0x118>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a40:	230c      	movs	r3, #12
 8000a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 fd68 	bl	800153c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_UART_MspInit+0x120>)
 8000a70:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000aa4:	f000 fad4 	bl	8001050 <HAL_DMA_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000aae:	f7ff ff09 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000ab6:	675a      	str	r2, [r3, #116]	; 0x74
 8000ab8:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <HAL_UART_MspInit+0x11c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2026      	movs	r0, #38	; 0x26
 8000ac4:	f000 fa8d 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac8:	2026      	movs	r0, #38	; 0x26
 8000aca:	f000 faa6 	bl	800101a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	37b0      	adds	r7, #176	; 0xb0
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	20000158 	.word	0x20000158
 8000ae4:	4002006c 	.word	0x4002006c

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f936 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <DMA1_Channel6_IRQHandler+0x10>)
 8000b42:	f000 fc1c 	bl	800137e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000158 	.word	0x20000158

08000b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <USART2_IRQHandler+0x10>)
 8000b56:	f003 f961 	bl	8003e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000d0 	.word	0x200000d0

08000b64 <_read>:
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
 8000b76:	f3af 8000 	nop.w
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	2301      	movs	r3, #1
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
 8000c38:	f004 fdbc 	bl	80057b4 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20018000 	.word	0x20018000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200001a8 	.word	0x200001a8
 8000c70:	20000300 	.word	0x20000300

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopForever+0x2>
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopForever+0x6>)
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopForever+0xa>)
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopForever+0xe>)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:
 8000caa:	58d4      	ldr	r4, [r2, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:
 8000cb0:	18c4      	adds	r4, r0, r3
 8000cb2:	428c      	cmp	r4, r1
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopForever+0x12>)
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopForever+0x16>)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:
 8000cc2:	42a2      	cmp	r2, r4
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>
 8000cc6:	f004 fd7b 	bl	80057c0 <__libc_init_array>
 8000cca:	f7ff fc63 	bl	8000594 <main>

08000cce <LoopForever>:
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
 8000cd0:	20018000 	.word	0x20018000
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000068 	.word	0x20000068
 8000cdc:	08006418 	.word	0x08006418
 8000ce0:	20000068 	.word	0x20000068
 8000ce4:	200002fc 	.word	0x200002fc

08000ce8 <ADC1_2_IRQHandler>:
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>
	...

08000cec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_Init+0x3c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_Init+0x3c>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 f962 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f80f 	bl	8000d2c <HAL_InitTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	e001      	b.n	8000d1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d1a:	f7ff fdd9 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_InitTick+0x6c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d023      	beq.n	8000d88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_InitTick+0x70>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f96d 	bl	8001036 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10f      	bne.n	8000d82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d809      	bhi.n	8000d7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f937 	bl	8000fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_InitTick+0x74>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e007      	b.n	8000d8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e004      	b.n	8000d8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e001      	b.n	8000d8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000004 	.word	0x20000004

08000da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	200001ac 	.word	0x200001ac

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	200001ac 	.word	0x200001ac

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff ffee 	bl	8000dcc <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffde 	bl	8000dcc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff29 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff3e 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff8e 	bl	8000f20 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff31 	bl	8000e90 <__NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffa2 	bl	8000f88 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e098      	b.n	8001194 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_DMA_Init+0x150>)
 800106a:	429a      	cmp	r2, r3
 800106c:	d80f      	bhi.n	800108e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <HAL_DMA_Init+0x154>)
 8001076:	4413      	add	r3, r2
 8001078:	4a4b      	ldr	r2, [pc, #300]	; (80011a8 <HAL_DMA_Init+0x158>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	009a      	lsls	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_DMA_Init+0x15c>)
 800108a:	641a      	str	r2, [r3, #64]	; 0x40
 800108c:	e00e      	b.n	80010ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_DMA_Init+0x160>)
 8001096:	4413      	add	r3, r2
 8001098:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <HAL_DMA_Init+0x158>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	009a      	lsls	r2, r3, #2
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_DMA_Init+0x164>)
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001106:	d039      	beq.n	800117c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_DMA_Init+0x15c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d11a      	bne.n	8001148 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_DMA_Init+0x168>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 031c 	and.w	r3, r3, #28
 800111e:	210f      	movs	r1, #15
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4924      	ldr	r1, [pc, #144]	; (80011b8 <HAL_DMA_Init+0x168>)
 8001128:	4013      	ands	r3, r2
 800112a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_DMA_Init+0x168>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	f003 031c 	and.w	r3, r3, #28
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	491d      	ldr	r1, [pc, #116]	; (80011b8 <HAL_DMA_Init+0x168>)
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
 8001146:	e019      	b.n	800117c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_DMA_Init+0x16c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	f003 031c 	and.w	r3, r3, #28
 8001154:	210f      	movs	r1, #15
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	4917      	ldr	r1, [pc, #92]	; (80011bc <HAL_DMA_Init+0x16c>)
 800115e:	4013      	ands	r3, r2
 8001160:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_DMA_Init+0x16c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 031c 	and.w	r3, r3, #28
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	4911      	ldr	r1, [pc, #68]	; (80011bc <HAL_DMA_Init+0x16c>)
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40020407 	.word	0x40020407
 80011a4:	bffdfff8 	.word	0xbffdfff8
 80011a8:	cccccccd 	.word	0xcccccccd
 80011ac:	40020000 	.word	0x40020000
 80011b0:	bffdfbf8 	.word	0xbffdfbf8
 80011b4:	40020400 	.word	0x40020400
 80011b8:	400200a8 	.word	0x400200a8
 80011bc:	400204a8 	.word	0x400204a8

080011c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_DMA_Start_IT+0x20>
 80011dc:	2302      	movs	r3, #2
 80011de:	e04b      	b.n	8001278 <HAL_DMA_Start_IT+0xb8>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d13a      	bne.n	800126a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 f95f 	bl	80014dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	2b00      	cmp	r3, #0
 8001224:	d008      	beq.n	8001238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 020e 	orr.w	r2, r2, #14
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e00f      	b.n	8001258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0204 	bic.w	r2, r2, #4
 8001246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 020a 	orr.w	r2, r2, #10
 8001256:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e005      	b.n	8001276 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001272:	2302      	movs	r3, #2
 8001274:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001276:	7dfb      	ldrb	r3, [r7, #23]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d008      	beq.n	80012aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e022      	b.n	80012f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 020e 	bic.w	r2, r2, #14
 80012b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f003 021c 	and.w	r2, r3, #28
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	2101      	movs	r1, #1
 80012d8:	fa01 f202 	lsl.w	r2, r1, r2
 80012dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d005      	beq.n	8001320 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2204      	movs	r2, #4
 8001318:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e029      	b.n	8001374 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 020e 	bic.w	r2, r2, #14
 800132e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	f003 021c 	and.w	r2, r3, #28
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
    }
  }
  return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f003 031c 	and.w	r3, r3, #28
 800139e:	2204      	movs	r2, #4
 80013a0:	409a      	lsls	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d026      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x7a>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d021      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d107      	bne.n	80013d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0204 	bic.w	r2, r2, #4
 80013d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f003 021c 	and.w	r2, r3, #28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2104      	movs	r1, #4
 80013e0:	fa01 f202 	lsl.w	r2, r1, r2
 80013e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d071      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013f6:	e06c      	b.n	80014d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	f003 031c 	and.w	r3, r3, #28
 8001400:	2202      	movs	r2, #2
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02e      	beq.n	800146a <HAL_DMA_IRQHandler+0xec>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d029      	beq.n	800146a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0320 	and.w	r3, r3, #32
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10b      	bne.n	800143c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 020a 	bic.w	r2, r2, #10
 8001432:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f003 021c 	and.w	r2, r3, #28
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2102      	movs	r1, #2
 800144a:	fa01 f202 	lsl.w	r2, r1, r2
 800144e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d038      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001468:	e033      	b.n	80014d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 031c 	and.w	r3, r3, #28
 8001472:	2208      	movs	r2, #8
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d02a      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x156>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d025      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020e 	bic.w	r2, r2, #14
 8001496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f003 021c 	and.w	r2, r3, #28
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f202 	lsl.w	r2, r1, r2
 80014aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
}
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 021c 	and.w	r2, r3, #28
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d108      	bne.n	8001520 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800151e:	e007      	b.n	8001530 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e17f      	b.n	800184c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8171 	beq.w	8001846 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <HAL_GPIO_Init+0x40>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d130      	bne.n	80015de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	f003 0201 	and.w	r2, r3, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d118      	bne.n	800161c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015f0:	2201      	movs	r2, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	f003 0201 	and.w	r2, r3, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b03      	cmp	r3, #3
 8001626:	d017      	beq.n	8001658 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	6939      	ldr	r1, [r7, #16]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80ac 	beq.w	8001846 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_GPIO_Init+0x330>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	4a5e      	ldr	r2, [pc, #376]	; (800186c <HAL_GPIO_Init+0x330>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6613      	str	r3, [r2, #96]	; 0x60
 80016fa:	4b5c      	ldr	r3, [pc, #368]	; (800186c <HAL_GPIO_Init+0x330>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001706:	4a5a      	ldr	r2, [pc, #360]	; (8001870 <HAL_GPIO_Init+0x334>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001730:	d025      	beq.n	800177e <HAL_GPIO_Init+0x242>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <HAL_GPIO_Init+0x338>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01f      	beq.n	800177a <HAL_GPIO_Init+0x23e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <HAL_GPIO_Init+0x33c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x23a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4d      	ldr	r2, [pc, #308]	; (800187c <HAL_GPIO_Init+0x340>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x236>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_GPIO_Init+0x344>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x232>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4b      	ldr	r2, [pc, #300]	; (8001884 <HAL_GPIO_Init+0x348>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x22e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_GPIO_Init+0x34c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x22a>
 8001762:	2306      	movs	r3, #6
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x244>
 8001766:	2307      	movs	r3, #7
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x244>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x244>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800177e:	2300      	movs	r3, #0
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001790:	4937      	ldr	r1, [pc, #220]	; (8001870 <HAL_GPIO_Init+0x334>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_GPIO_Init+0x350>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017c2:	4a32      	ldr	r2, [pc, #200]	; (800188c <HAL_GPIO_Init+0x350>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_GPIO_Init+0x350>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017ec:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_GPIO_Init+0x350>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_GPIO_Init+0x350>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_GPIO_Init+0x350>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_GPIO_Init+0x350>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <HAL_GPIO_Init+0x350>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	f47f ae78 	bne.w	800154c <HAL_GPIO_Init+0x10>
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	48000400 	.word	0x48000400
 8001878:	48000800 	.word	0x48000800
 800187c:	48000c00 	.word	0x48000c00
 8001880:	48001000 	.word	0x48001000
 8001884:	48001400 	.word	0x48001400
 8001888:	48001800 	.word	0x48001800
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ba:	d130      	bne.n	800191e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c8:	d038      	beq.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2232      	movs	r2, #50	; 0x32
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9b      	lsrs	r3, r3, #18
 80018ec:	3301      	adds	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f0:	e002      	b.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001904:	d102      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f2      	bne.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001918:	d110      	bne.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e00f      	b.n	800193e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192a:	d007      	beq.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007000 	.word	0x40007000
 8001950:	20000000 	.word	0x20000000
 8001954:	431bde83 	.word	0x431bde83

08001958 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e3ca      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4b97      	ldr	r3, [pc, #604]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80e4 	beq.w	8001b54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4a>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	f040 808b 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b01      	cmp	r3, #1
 800199e:	f040 8087 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x62>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e3a2      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1a      	ldr	r2, [r3, #32]
 80019be:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_RCC_OscConfig+0x7c>
 80019ca:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d2:	e005      	b.n	80019e0 <HAL_RCC_OscConfig+0x88>
 80019d4:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d223      	bcs.n	8001a2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fd55 	bl	8002498 <RCC_SetFlashLatencyFromMSIRange>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e383      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	496d      	ldr	r1, [pc, #436]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a16:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4968      	ldr	r1, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
 8001a2a:	e025      	b.n	8001a78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4960      	ldr	r1, [pc, #384]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	495b      	ldr	r1, [pc, #364]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fd15 	bl	8002498 <RCC_SetFlashLatencyFromMSIRange>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e343      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a78:	f000 fc4a 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	4950      	ldr	r1, [pc, #320]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_RCC_OscConfig+0x278>)
 8001a96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a98:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f945 	bl	8000d2c <HAL_InitTick>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d052      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	e327      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d032      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ab8:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f982 	bl	8000dcc <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001acc:	f7ff f97e 	bl	8000dcc <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e310      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4931      	ldr	r1, [pc, #196]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	492c      	ldr	r1, [pc, #176]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e01a      	b.n	8001b54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f94f 	bl	8000dcc <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b32:	f7ff f94b 	bl	8000dcc <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e2dd      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x1da>
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d074      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x21a>
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d10e      	bne.n	8001b8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d064      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d160      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e2ba      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x24a>
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e026      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001baa:	d115      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x280>
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a02      	ldr	r2, [pc, #8]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	0800638c 	.word	0x0800638c
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a9f      	ldr	r2, [pc, #636]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b9d      	ldr	r3, [pc, #628]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a9c      	ldr	r2, [pc, #624]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f8e8 	bl	8000dcc <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff f8e4 	bl	8000dcc <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e276      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	4b92      	ldr	r3, [pc, #584]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2a8>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f8d4 	bl	8000dcc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff f8d0 	bl	8000dcc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e262      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2d0>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d060      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_OscConfig+0x310>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d119      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d116      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c68:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x328>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e23f      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	4973      	ldr	r1, [pc, #460]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	e040      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d023      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f88f 	bl	8000dcc <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f88b 	bl	8000dcc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e21d      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	495f      	ldr	r1, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e018      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5c      	ldr	r2, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f86b 	bl	8000dcc <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f867 	bl	8000dcc <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1f9      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f846 	bl	8000dcc <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff f842 	bl	8000dcc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1d4      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ef      	beq.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f829 	bl	8000dcc <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f825 	bl	8000dcc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1b7      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ef      	bne.n	8001d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a6 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df0:	f7fe ffec 	bl	8000dcc <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7fe ffe8 	bl	8000dcc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e17a      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d8>
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2e:	e029      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d115      	bne.n	8001e64 <HAL_RCC_OscConfig+0x50c>
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	4b9c      	ldr	r3, [pc, #624]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a9b      	ldr	r2, [pc, #620]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	4b98      	ldr	r3, [pc, #608]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a97      	ldr	r2, [pc, #604]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d016      	beq.n	8001eba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7fe ff9e 	bl	8000dcc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7fe ff9a 	bl	8000dcc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e12a      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ed      	beq.n	8001e94 <HAL_RCC_OscConfig+0x53c>
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7fe ff87 	bl	8000dcc <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7fe ff83 	bl	8000dcc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e113      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	4b7f      	ldr	r3, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b7a      	ldr	r3, [pc, #488]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a79      	ldr	r2, [pc, #484]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80fe 	beq.w	80020fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	f040 80d0 	bne.w	80020ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f0c:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d130      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d127      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d11f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f4c:	2a07      	cmp	r2, #7
 8001f4e:	bf14      	ite	ne
 8001f50:	2201      	movne	r2, #1
 8001f52:	2200      	moveq	r2, #0
 8001f54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d113      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d06e      	beq.n	8002060 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d069      	beq.n	800205c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f94:	4b50      	ldr	r3, [pc, #320]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0ad      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb0:	f7fe ff0c 	bl	8000dcc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ff08 	bl	8000dcc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e09a      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	4311      	orrs	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ff0:	0212      	lsls	r2, r2, #8
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff8:	0852      	lsrs	r2, r2, #1
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	0552      	lsls	r2, r2, #21
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002004:	0852      	lsrs	r2, r2, #1
 8002006:	3a01      	subs	r2, #1
 8002008:	0652      	lsls	r2, r2, #25
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002010:	0912      	lsrs	r2, r2, #4
 8002012:	0452      	lsls	r2, r2, #17
 8002014:	430a      	orrs	r2, r1
 8002016:	4930      	ldr	r1, [pc, #192]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002018:	4313      	orrs	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002034:	f7fe feca 	bl	8000dcc <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe fec6 	bl	8000dcc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e058      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205a:	e050      	b.n	80020fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e04f      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d148      	bne.n	80020fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002084:	f7fe fea2 	bl	8000dcc <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fe9e 	bl	8000dcc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e030      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x734>
 80020aa:	e028      	b.n	80020fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d023      	beq.n	80020fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_RCC_OscConfig+0x780>)
 80020b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7fe fe85 	bl	8000dcc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	e00c      	b.n	80020e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7fe fe81 	bl	8000dcc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d905      	bls.n	80020e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e013      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x7b0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ec      	bne.n	80020c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_OscConfig+0x7b0>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	4905      	ldr	r1, [pc, #20]	; (8002108 <HAL_RCC_OscConfig+0x7b0>)
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_OscConfig+0x7b4>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
 80020f8:	e001      	b.n	80020fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	feeefffc 	.word	0xfeeefffc

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0e7      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b75      	ldr	r3, [pc, #468]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d910      	bls.n	8002154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4970      	ldr	r1, [pc, #448]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0cf      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4b66      	ldr	r3, [pc, #408]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216c:	429a      	cmp	r2, r3
 800216e:	d908      	bls.n	8002182 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4960      	ldr	r1, [pc, #384]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d04c      	beq.n	8002228 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d121      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0a6      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e09a      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c6:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e08e      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d6:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e086      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b46      	ldr	r3, [pc, #280]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4943      	ldr	r1, [pc, #268]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f8:	f7fe fde8 	bl	8000dcc <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fde4 	bl	8000dcc <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e06e      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002240:	429a      	cmp	r2, r3
 8002242:	d208      	bcs.n	8002256 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	492b      	ldr	r1, [pc, #172]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d210      	bcs.n	8002286 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 0207 	bic.w	r2, r3, #7
 800226c:	4923      	ldr	r1, [pc, #140]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCC_ClockConfig+0x1ec>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e036      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4918      	ldr	r1, [pc, #96]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4910      	ldr	r1, [pc, #64]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c4:	f000 f824 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	490b      	ldr	r1, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1f4>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1f8>)
 80022e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1fc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fd1f 	bl	8000d2c <HAL_InitTick>
 80022ee:	4603      	mov	r3, r0
 80022f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80022f2:	7afb      	ldrb	r3, [r7, #11]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40022000 	.word	0x40022000
 8002300:	40021000 	.word	0x40021000
 8002304:	0800638c 	.word	0x0800638c
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	4b3e      	ldr	r3, [pc, #248]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002328:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x34>
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d121      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d11e      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002344:	4b34      	ldr	r3, [pc, #208]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e005      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800236c:	4a2b      	ldr	r2, [pc, #172]	; (800241c <HAL_RCC_GetSysClockFreq+0x10c>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10d      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d102      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_RCC_GetSysClockFreq+0x110>)
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e004      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d101      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_RCC_GetSysClockFreq+0x114>)
 8002396:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d134      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d003      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0xac>
 80023b4:	e005      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <HAL_RCC_GetSysClockFreq+0x110>)
 80023b8:	617b      	str	r3, [r7, #20]
      break;
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_GetSysClockFreq+0x114>)
 80023be:	617b      	str	r3, [r7, #20]
      break;
 80023c0:	e002      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	617b      	str	r3, [r7, #20]
      break;
 80023c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	3301      	adds	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	fb03 f202 	mul.w	r2, r3, r2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	0e5b      	lsrs	r3, r3, #25
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	3301      	adds	r3, #1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002408:	69bb      	ldr	r3, [r7, #24]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	080063a4 	.word	0x080063a4
 8002420:	00f42400 	.word	0x00f42400
 8002424:	007a1200 	.word	0x007a1200

08002428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	0800639c 	.word	0x0800639c

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002470:	f7ff ffda 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0adb      	lsrs	r3, r3, #11
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4904      	ldr	r1, [pc, #16]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	0800639c 	.word	0x0800639c

08002498 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024b0:	f7ff f9ee 	bl	8001890 <HAL_PWREx_GetVoltageRange>
 80024b4:	6178      	str	r0, [r7, #20]
 80024b6:	e014      	b.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	4a24      	ldr	r2, [pc, #144]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	; 0x58
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024d0:	f7ff f9de 	bl	8001890 <HAL_PWREx_GetVoltageRange>
 80024d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e8:	d10b      	bne.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d919      	bls.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2ba0      	cmp	r3, #160	; 0xa0
 80024f4:	d902      	bls.n	80024fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024f6:	2302      	movs	r3, #2
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e013      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024fc:	2301      	movs	r3, #1
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	e010      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d902      	bls.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002508:	2303      	movs	r3, #3
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	e00a      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d102      	bne.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002514:	2302      	movs	r3, #2
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e004      	b.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d101      	bne.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 0207 	bic.w	r2, r3, #7
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	40022000 	.word	0x40022000

08002558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002560:	2300      	movs	r3, #0
 8002562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002564:	2300      	movs	r3, #0
 8002566:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002570:	2b00      	cmp	r3, #0
 8002572:	d041      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002578:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800257c:	d02a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800257e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002582:	d824      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800258a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800258e:	d81e      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002598:	d010      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800259a:	e018      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800259c:	4b86      	ldr	r3, [pc, #536]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a85      	ldr	r2, [pc, #532]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a8:	e015      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fabb 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ba:	e00c      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3320      	adds	r3, #32
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fba6 	bl	8002d14 <RCCEx_PLLSAI2_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025cc:	e003      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	74fb      	strb	r3, [r7, #19]
      break;
 80025d2:	e000      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025dc:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ea:	4973      	ldr	r1, [pc, #460]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025f2:	e001      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d041      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002608:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800260c:	d02a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800260e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002612:	d824      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800261a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261e:	d81e      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d010      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800262a:	e018      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800262c:	4b62      	ldr	r3, [pc, #392]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a61      	ldr	r2, [pc, #388]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002638:	e015      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fa73 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800264a:	e00c      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3320      	adds	r3, #32
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fb5e 	bl	8002d14 <RCCEx_PLLSAI2_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265c:	e003      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	74fb      	strb	r3, [r7, #19]
      break;
 8002662:	e000      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800266c:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267a:	494f      	ldr	r1, [pc, #316]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002682:	e001      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a0 	beq.w	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00d      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	4a40      	ldr	r2, [pc, #256]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6593      	str	r3, [r2, #88]	; 0x58
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fb78 	bl	8000dcc <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026de:	e009      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e0:	f7fe fb74 	bl	8000dcc <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	74fb      	strb	r3, [r7, #19]
        break;
 80026f2:	e005      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d15c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002710:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01f      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	d019      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fb33 	bl	8000dcc <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002768:	e00b      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fb2f 	bl	8000dcc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d902      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	74fb      	strb	r3, [r7, #19]
            break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ec      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a6:	4904      	ldr	r1, [pc, #16]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027ae:	e009      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c4:	7c7b      	ldrb	r3, [r7, #17]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b9e      	ldr	r3, [pc, #632]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a9d      	ldr	r2, [pc, #628]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e2:	4b98      	ldr	r3, [pc, #608]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f023 0203 	bic.w	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	4994      	ldr	r1, [pc, #592]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002804:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 020c 	bic.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	498c      	ldr	r1, [pc, #560]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002826:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	4983      	ldr	r1, [pc, #524]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002848:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	497b      	ldr	r1, [pc, #492]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002878:	4972      	ldr	r1, [pc, #456]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800288c:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	496a      	ldr	r1, [pc, #424]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	4961      	ldr	r1, [pc, #388]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028d0:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	4959      	ldr	r1, [pc, #356]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	4950      	ldr	r1, [pc, #320]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	4948      	ldr	r1, [pc, #288]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	493f      	ldr	r1, [pc, #252]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d028      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002958:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	4937      	ldr	r1, [pc, #220]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002976:	d106      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002978:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002982:	60d3      	str	r3, [r2, #12]
 8002984:	e011      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298e:	d10c      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f8c8 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d028      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029b6:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	491f      	ldr	r1, [pc, #124]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d4:	d106      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e0:	60d3      	str	r3, [r2, #12]
 80029e2:	e011      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f899 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02b      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a02      	ldr	r2, [pc, #8]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e014      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f867 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02f      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a86:	4928      	ldr	r1, [pc, #160]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f844 	bl	8002b2c <RCCEx_PLLSAI1_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
 8002ab2:	e011      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3320      	adds	r3, #32
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f925 	bl	8002d14 <RCCEx_PLLSAI2_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ace:	7cfb      	ldrb	r3, [r7, #19]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af2:	490d      	ldr	r1, [pc, #52]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b3a:	4b75      	ldr	r3, [pc, #468]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d018      	beq.n	8002b78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b46:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0203 	and.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10d      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
       ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d047      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e044      	b.n	8002c02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d018      	beq.n	8002bb2 <RCCEx_PLLSAI1_Config+0x86>
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d825      	bhi.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d002      	beq.n	8002b8e <RCCEx_PLLSAI1_Config+0x62>
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d009      	beq.n	8002ba0 <RCCEx_PLLSAI1_Config+0x74>
 8002b8c:	e020      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b8e:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11d      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e01a      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d116      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e013      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bb2:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bbe:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bce:	e006      	b.n	8002bde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e004      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	4944      	ldr	r1, [pc, #272]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d17d      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c14:	f7fe f8da 	bl	8000dcc <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1a:	e009      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c1c:	f7fe f8d6 	bl	8000dcc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d902      	bls.n	8002c30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c2e:	e005      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ef      	bne.n	8002c1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d160      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	0211      	lsls	r1, r2, #8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	0912      	lsrs	r2, r2, #4
 8002c60:	0452      	lsls	r2, r2, #17
 8002c62:	430a      	orrs	r2, r1
 8002c64:	492a      	ldr	r1, [pc, #168]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
 8002c6a:	e027      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d112      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c72:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6892      	ldr	r2, [r2, #8]
 8002c82:	0211      	lsls	r1, r2, #8
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6912      	ldr	r2, [r2, #16]
 8002c88:	0852      	lsrs	r2, r2, #1
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0552      	lsls	r2, r2, #21
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	491f      	ldr	r1, [pc, #124]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	610b      	str	r3, [r1, #16]
 8002c96:	e011      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ca0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	0211      	lsls	r1, r2, #8
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6952      	ldr	r2, [r2, #20]
 8002cae:	0852      	lsrs	r2, r2, #1
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	0652      	lsls	r2, r2, #25
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	4916      	ldr	r1, [pc, #88]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe f880 	bl	8000dcc <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cce:	e009      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd0:	f7fe f87c 	bl	8000dcc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce2:	e005      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ef      	beq.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4904      	ldr	r1, [pc, #16]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000

08002d14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d22:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10d      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
       ||
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d46:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
       ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d047      	beq.n	8002dea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e044      	b.n	8002dea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d018      	beq.n	8002d9a <RCCEx_PLLSAI2_Config+0x86>
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d825      	bhi.n	8002db8 <RCCEx_PLLSAI2_Config+0xa4>
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d002      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0x62>
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d009      	beq.n	8002d88 <RCCEx_PLLSAI2_Config+0x74>
 8002d74:	e020      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11d      	bne.n	8002dbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e01a      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d88:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e013      	b.n	8002dc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da6:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002db6:	e006      	b.n	8002dc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e004      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	430b      	orrs	r3, r1
 8002de4:	4939      	ldr	r1, [pc, #228]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d167      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fd ffe6 	bl	8000dcc <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e02:	e009      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e04:	f7fd ffe2 	bl	8000dcc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	73fb      	strb	r3, [r7, #15]
        break;
 8002e16:	e005      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ef      	bne.n	8002e04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d14a      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e30:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	0211      	lsls	r1, r2, #8
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	0912      	lsrs	r2, r2, #4
 8002e48:	0452      	lsls	r2, r2, #17
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	491f      	ldr	r1, [pc, #124]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	614b      	str	r3, [r1, #20]
 8002e52:	e011      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6892      	ldr	r2, [r2, #8]
 8002e64:	0211      	lsls	r1, r2, #8
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6912      	ldr	r2, [r2, #16]
 8002e6a:	0852      	lsrs	r2, r2, #1
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	0652      	lsls	r2, r2, #25
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4916      	ldr	r1, [pc, #88]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd ffa2 	bl	8000dcc <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e8a:	e009      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e8c:	f7fd ff9e 	bl	8000dcc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d902      	bls.n	8002ea0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e9e:	e005      	b.n	8002eac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	4904      	ldr	r1, [pc, #16]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e049      	b.n	8002f76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fd0e 	bl	8000918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f000 fa50 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_TIM_PWM_Start+0x24>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e03c      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d109      	bne.n	8002fbe <HAL_TIM_PWM_Start+0x3e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e02f      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d109      	bne.n	8002fd8 <HAL_TIM_PWM_Start+0x58>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e022      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d109      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0x72>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e015      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d109      	bne.n	800300c <HAL_TIM_PWM_Start+0x8c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e008      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e09c      	b.n	8003160 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xb6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003034:	e023      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start+0xc6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003044:	e01b      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start+0xd6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003054:	e013      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start+0xe6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003064:	e00b      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b10      	cmp	r3, #16
 800306a:	d104      	bne.n	8003076 <HAL_TIM_PWM_Start+0xf6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003074:	e003      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd04 	bl	8003a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a35      	ldr	r2, [pc, #212]	; (8003168 <HAL_TIM_PWM_Start+0x1e8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a34      	ldr	r2, [pc, #208]	; (800316c <HAL_TIM_PWM_Start+0x1ec>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a32      	ldr	r2, [pc, #200]	; (8003170 <HAL_TIM_PWM_Start+0x1f0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a31      	ldr	r2, [pc, #196]	; (8003174 <HAL_TIM_PWM_Start+0x1f4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <HAL_TIM_PWM_Start+0x1f8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_PWM_Start+0x142>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_PWM_Start+0x144>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <HAL_TIM_PWM_Start+0x1e8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_TIM_PWM_Start+0x19e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d018      	beq.n	800311e <HAL_TIM_PWM_Start+0x19e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_TIM_PWM_Start+0x1fc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_TIM_PWM_Start+0x19e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a21      	ldr	r2, [pc, #132]	; (8003180 <HAL_TIM_PWM_Start+0x200>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_TIM_PWM_Start+0x19e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <HAL_TIM_PWM_Start+0x204>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_TIM_PWM_Start+0x19e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <HAL_TIM_PWM_Start+0x1ec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_TIM_PWM_Start+0x19e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_TIM_PWM_Start+0x1f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d115      	bne.n	800314a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_TIM_PWM_Start+0x208>)
 8003126:	4013      	ands	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d015      	beq.n	800315c <HAL_TIM_PWM_Start+0x1dc>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d011      	beq.n	800315c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	e008      	b.n	800315c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e000      	b.n	800315e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40012c00 	.word	0x40012c00
 800316c:	40013400 	.word	0x40013400
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	00010007 	.word	0x00010007

0800318c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0ff      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b14      	cmp	r3, #20
 80031b6:	f200 80f0 	bhi.w	800339a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031ba:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	08003215 	.word	0x08003215
 80031c4:	0800339b 	.word	0x0800339b
 80031c8:	0800339b 	.word	0x0800339b
 80031cc:	0800339b 	.word	0x0800339b
 80031d0:	08003255 	.word	0x08003255
 80031d4:	0800339b 	.word	0x0800339b
 80031d8:	0800339b 	.word	0x0800339b
 80031dc:	0800339b 	.word	0x0800339b
 80031e0:	08003297 	.word	0x08003297
 80031e4:	0800339b 	.word	0x0800339b
 80031e8:	0800339b 	.word	0x0800339b
 80031ec:	0800339b 	.word	0x0800339b
 80031f0:	080032d7 	.word	0x080032d7
 80031f4:	0800339b 	.word	0x0800339b
 80031f8:	0800339b 	.word	0x0800339b
 80031fc:	0800339b 	.word	0x0800339b
 8003200:	08003319 	.word	0x08003319
 8003204:	0800339b 	.word	0x0800339b
 8003208:	0800339b 	.word	0x0800339b
 800320c:	0800339b 	.word	0x0800339b
 8003210:	08003359 	.word	0x08003359
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f964 	bl	80034e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0204 	bic.w	r2, r2, #4
 800323e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	619a      	str	r2, [r3, #24]
      break;
 8003252:	e0a5      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f9d4 	bl	8003608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6999      	ldr	r1, [r3, #24]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	619a      	str	r2, [r3, #24]
      break;
 8003294:	e084      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fa3d 	bl	800371c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0208 	orr.w	r2, r2, #8
 80032b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0204 	bic.w	r2, r2, #4
 80032c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69d9      	ldr	r1, [r3, #28]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	61da      	str	r2, [r3, #28]
      break;
 80032d4:	e064      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 faa5 	bl	800382c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69d9      	ldr	r1, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	021a      	lsls	r2, r3, #8
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	61da      	str	r2, [r3, #28]
      break;
 8003316:	e043      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 faee 	bl	8003900 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0208 	orr.w	r2, r2, #8
 8003332:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003356:	e023      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fb32 	bl	80039c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003398:	e002      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
      break;
 800339e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3d      	ldr	r2, [pc, #244]	; (80034cc <TIM_Base_SetConfig+0x118>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3c      	ldr	r2, [pc, #240]	; (80034d0 <TIM_Base_SetConfig+0x11c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <TIM_Base_SetConfig+0x120>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d01b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <TIM_Base_SetConfig+0x118>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d017      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <TIM_Base_SetConfig+0x11c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <TIM_Base_SetConfig+0x120>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <TIM_Base_SetConfig+0x128>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <TIM_Base_SetConfig+0x130>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00f      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a11      	ldr	r2, [pc, #68]	; (80034dc <TIM_Base_SetConfig+0x128>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <TIM_Base_SetConfig+0x130>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	615a      	str	r2, [r3, #20]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f023 0201 	bic.w	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f023 0302 	bic.w	r3, r3, #2
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <TIM_OC1_SetConfig+0x10c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00f      	beq.n	8003568 <TIM_OC1_SetConfig+0x80>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <TIM_OC1_SetConfig+0x110>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00b      	beq.n	8003568 <TIM_OC1_SetConfig+0x80>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <TIM_OC1_SetConfig+0x114>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <TIM_OC1_SetConfig+0x80>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a29      	ldr	r2, [pc, #164]	; (8003600 <TIM_OC1_SetConfig+0x118>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC1_SetConfig+0x80>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <TIM_OC1_SetConfig+0x11c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d10c      	bne.n	8003582 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0308 	bic.w	r3, r3, #8
 800356e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <TIM_OC1_SetConfig+0x10c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00f      	beq.n	80035aa <TIM_OC1_SetConfig+0xc2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1a      	ldr	r2, [pc, #104]	; (80035f8 <TIM_OC1_SetConfig+0x110>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00b      	beq.n	80035aa <TIM_OC1_SetConfig+0xc2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <TIM_OC1_SetConfig+0x114>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <TIM_OC1_SetConfig+0xc2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a18      	ldr	r2, [pc, #96]	; (8003600 <TIM_OC1_SetConfig+0x118>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_OC1_SetConfig+0xc2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a17      	ldr	r2, [pc, #92]	; (8003604 <TIM_OC1_SetConfig+0x11c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d111      	bne.n	80035ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40013400 	.word	0x40013400
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 0210 	bic.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0320 	bic.w	r3, r3, #32
 8003656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a28      	ldr	r2, [pc, #160]	; (8003708 <TIM_OC2_SetConfig+0x100>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_OC2_SetConfig+0x6c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a27      	ldr	r2, [pc, #156]	; (800370c <TIM_OC2_SetConfig+0x104>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d10d      	bne.n	8003690 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800367a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <TIM_OC2_SetConfig+0x100>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00f      	beq.n	80036b8 <TIM_OC2_SetConfig+0xb0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <TIM_OC2_SetConfig+0x104>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00b      	beq.n	80036b8 <TIM_OC2_SetConfig+0xb0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <TIM_OC2_SetConfig+0x108>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <TIM_OC2_SetConfig+0xb0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <TIM_OC2_SetConfig+0x10c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_OC2_SetConfig+0xb0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a19      	ldr	r2, [pc, #100]	; (8003718 <TIM_OC2_SetConfig+0x110>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d113      	bne.n	80036e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40013400 	.word	0x40013400
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800

0800371c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <TIM_OC3_SetConfig+0xfc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_OC3_SetConfig+0x6a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <TIM_OC3_SetConfig+0x100>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10d      	bne.n	80037a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800378c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <TIM_OC3_SetConfig+0xfc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00f      	beq.n	80037ca <TIM_OC3_SetConfig+0xae>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <TIM_OC3_SetConfig+0x100>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <TIM_OC3_SetConfig+0xae>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <TIM_OC3_SetConfig+0x104>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <TIM_OC3_SetConfig+0xae>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a19      	ldr	r2, [pc, #100]	; (8003824 <TIM_OC3_SetConfig+0x108>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_OC3_SetConfig+0xae>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <TIM_OC3_SetConfig+0x10c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d113      	bne.n	80037f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	031b      	lsls	r3, r3, #12
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a18      	ldr	r2, [pc, #96]	; (80038ec <TIM_OC4_SetConfig+0xc0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00f      	beq.n	80038b0 <TIM_OC4_SetConfig+0x84>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <TIM_OC4_SetConfig+0xc4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_OC4_SetConfig+0x84>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <TIM_OC4_SetConfig+0xc8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_OC4_SetConfig+0x84>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <TIM_OC4_SetConfig+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC4_SetConfig+0x84>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a14      	ldr	r2, [pc, #80]	; (80038fc <TIM_OC4_SetConfig+0xd0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d109      	bne.n	80038c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40013400 	.word	0x40013400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800

08003900 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	041b      	lsls	r3, r3, #16
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <TIM_OC5_SetConfig+0xb4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00f      	beq.n	800397a <TIM_OC5_SetConfig+0x7a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <TIM_OC5_SetConfig+0xb8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_OC5_SetConfig+0x7a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a15      	ldr	r2, [pc, #84]	; (80039bc <TIM_OC5_SetConfig+0xbc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_OC5_SetConfig+0x7a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <TIM_OC5_SetConfig+0xc0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_OC5_SetConfig+0x7a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <TIM_OC5_SetConfig+0xc4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d109      	bne.n	800398e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40013400 	.word	0x40013400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800

080039c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	051b      	lsls	r3, r3, #20
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <TIM_OC6_SetConfig+0xb8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00f      	beq.n	8003a44 <TIM_OC6_SetConfig+0x7c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <TIM_OC6_SetConfig+0xbc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00b      	beq.n	8003a44 <TIM_OC6_SetConfig+0x7c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <TIM_OC6_SetConfig+0xc0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d007      	beq.n	8003a44 <TIM_OC6_SetConfig+0x7c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <TIM_OC6_SetConfig+0xc4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_OC6_SetConfig+0x7c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <TIM_OC6_SetConfig+0xc8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d109      	bne.n	8003a58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	029b      	lsls	r3, r3, #10
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40013400 	.word	0x40013400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800

08003a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1a      	ldr	r2, [r3, #32]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1a      	ldr	r2, [r3, #32]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e068      	b.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2e      	ldr	r2, [pc, #184]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d108      	bne.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01d      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d018      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40000c00 	.word	0x40000c00
 8003bec:	40014000 	.word	0x40014000

08003bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e040      	b.n	8003c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fc fed6 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fec6 	bl	80049c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fc0b 	bl	8004458 <UART_SetConfig>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e01b      	b.n	8003c84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 ff45 	bl	8004b0c <UART_CheckIdleState>
 8003c82:	4603      	mov	r3, r0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d137      	bne.n	8003d14 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_UART_Receive_IT+0x24>
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e030      	b.n	8003d16 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_UART_Receive_IT+0x94>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d01f      	beq.n	8003d04 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d018      	beq.n	8003d04 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69f9      	ldr	r1, [r7, #28]
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e6      	bne.n	8003cd2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f001 f80e 	bl	8004d2c <UART_Start_Receive_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	e000      	b.n	8003d16 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3728      	adds	r7, #40	; 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40008000 	.word	0x40008000

08003d24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d165      	bne.n	8003e06 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_Transmit_DMA+0x22>
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e05e      	b.n	8003e08 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2221      	movs	r2, #33	; 0x21
 8003d6c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d027      	beq.n	8003dc6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a25      	ldr	r2, [pc, #148]	; (8003e10 <HAL_UART_Transmit_DMA+0xec>)
 8003d7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <HAL_UART_Transmit_DMA+0xf0>)
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_UART_Transmit_DMA+0xf4>)
 8003d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	2200      	movs	r2, #0
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3328      	adds	r3, #40	; 0x28
 8003da6:	461a      	mov	r2, r3
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	f7fd fa09 	bl	80011c0 <HAL_DMA_Start_IT>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2210      	movs	r2, #16
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e020      	b.n	8003e08 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	623a      	str	r2, [r7, #32]
 8003df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	69f9      	ldr	r1, [r7, #28]
 8003df4:	6a3a      	ldr	r2, [r7, #32]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08004fcd 	.word	0x08004fcd
 8003e14:	08005067 	.word	0x08005067
 8003e18:	08005083 	.word	0x08005083

08003e1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b0ba      	sub	sp, #232	; 0xe8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e46:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d115      	bne.n	8003e84 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00f      	beq.n	8003e84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 82ae 	beq.w	80043d6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
      }
      return;
 8003e82:	e2a8      	b.n	80043d6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8117 	beq.w	80040bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e9e:	4b85      	ldr	r3, [pc, #532]	; (80040b4 <HAL_UART_IRQHandler+0x298>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 810a 	beq.w	80040bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d011      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xbc>
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d011      	beq.n	8003f08 <HAL_UART_IRQHandler+0xec>
 8003ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00b      	beq.n	8003f08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efe:	f043 0204 	orr.w	r2, r3, #4
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d011      	beq.n	8003f38 <HAL_UART_IRQHandler+0x11c>
 8003f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2204      	movs	r2, #4
 8003f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d017      	beq.n	8003f74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6a:	f043 0208 	orr.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d012      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x18a>
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00c      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8214 	beq.w	80043da <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ff6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04f      	beq.n	800409e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 ff80 	bl	8004f04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d141      	bne.n	8004096 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3308      	adds	r3, #8
 8004018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800402c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800403e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800404a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1d9      	bne.n	8004012 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	2b00      	cmp	r3, #0
 8004064:	d013      	beq.n	800408e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406a:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <HAL_UART_IRQHandler+0x29c>)
 800406c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd f942 	bl	80012fc <HAL_DMA_Abort_IT>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d017      	beq.n	80040ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004088:	4610      	mov	r0, r2
 800408a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	e00f      	b.n	80040ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9cc 	bl	800442c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e00b      	b.n	80040ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9c8 	bl	800442c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e007      	b.n	80040ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9c4 	bl	800442c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80040ac:	e195      	b.n	80043da <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ae:	bf00      	nop
    return;
 80040b0:	e193      	b.n	80043da <HAL_UART_IRQHandler+0x5be>
 80040b2:	bf00      	nop
 80040b4:	04000120 	.word	0x04000120
 80040b8:	08005101 	.word	0x08005101

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	f040 814e 	bne.w	8004362 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8147 	beq.w	8004362 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8140 	beq.w	8004362 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	f040 80b8 	bne.w	800426a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004106:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8167 	beq.w	80043de <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800411a:	429a      	cmp	r2, r3
 800411c:	f080 815f 	bcs.w	80043de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004126:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 8086 	bne.w	8004248 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800416a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800417e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1da      	bne.n	800413c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e1      	bne.n	8004186 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3308      	adds	r3, #8
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3308      	adds	r3, #8
 80041e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e3      	bne.n	80041c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004218:	f023 0310 	bic.w	r3, r3, #16
 800421c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800422a:	65bb      	str	r3, [r7, #88]	; 0x58
 800422c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e4      	bne.n	8004208 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd f81c 	bl	8001280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800425a:	b29b      	uxth	r3, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8ec 	bl	8004440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004268:	e0b9      	b.n	80043de <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004276:	b29b      	uxth	r3, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80ab 	beq.w	80043e2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800428c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80a6 	beq.w	80043e2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e4      	bne.n	8004296 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	623b      	str	r3, [r7, #32]
   return(result);
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042f0:	633a      	str	r2, [r7, #48]	; 0x30
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e3      	bne.n	80042cc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	60fb      	str	r3, [r7, #12]
   return(result);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0310 	bic.w	r3, r3, #16
 800432c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	69b9      	ldr	r1, [r7, #24]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	617b      	str	r3, [r7, #20]
   return(result);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e4      	bne.n	8004318 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f870 	bl	8004440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004360:	e03f      	b.n	80043e2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00e      	beq.n	800438c <HAL_UART_IRQHandler+0x570>
 800436e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 f8b7 	bl	80054f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800438a:	e02d      	b.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800438c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01c      	beq.n	80043e6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
    }
    return;
 80043b4:	e017      	b.n	80043e6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d012      	beq.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
 80043c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 feac 	bl	800512c <UART_EndTransmit_IT>
    return;
 80043d4:	e008      	b.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043d6:	bf00      	nop
 80043d8:	e006      	b.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043da:	bf00      	nop
 80043dc:	e004      	b.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043de:	bf00      	nop
 80043e0:	e002      	b.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043e8:	37e8      	adds	r7, #232	; 0xe8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop

080043f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b08a      	sub	sp, #40	; 0x28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4ba4      	ldr	r3, [pc, #656]	; (8004718 <UART_SetConfig+0x2c0>)
 8004488:	4013      	ands	r3, r2
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004490:	430b      	orrs	r3, r1
 8004492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a99      	ldr	r2, [pc, #612]	; (800471c <UART_SetConfig+0x2c4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	4313      	orrs	r3, r2
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a90      	ldr	r2, [pc, #576]	; (8004720 <UART_SetConfig+0x2c8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d126      	bne.n	8004530 <UART_SetConfig+0xd8>
 80044e2:	4b90      	ldr	r3, [pc, #576]	; (8004724 <UART_SetConfig+0x2cc>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d81b      	bhi.n	8004528 <UART_SetConfig+0xd0>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0xa0>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	08004509 	.word	0x08004509
 80044fc:	08004519 	.word	0x08004519
 8004500:	08004511 	.word	0x08004511
 8004504:	08004521 	.word	0x08004521
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e116      	b.n	800473e <UART_SetConfig+0x2e6>
 8004510:	2302      	movs	r3, #2
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e112      	b.n	800473e <UART_SetConfig+0x2e6>
 8004518:	2304      	movs	r3, #4
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e10e      	b.n	800473e <UART_SetConfig+0x2e6>
 8004520:	2308      	movs	r3, #8
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004526:	e10a      	b.n	800473e <UART_SetConfig+0x2e6>
 8004528:	2310      	movs	r3, #16
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	e106      	b.n	800473e <UART_SetConfig+0x2e6>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7c      	ldr	r2, [pc, #496]	; (8004728 <UART_SetConfig+0x2d0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d138      	bne.n	80045ac <UART_SetConfig+0x154>
 800453a:	4b7a      	ldr	r3, [pc, #488]	; (8004724 <UART_SetConfig+0x2cc>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b0c      	cmp	r3, #12
 8004546:	d82d      	bhi.n	80045a4 <UART_SetConfig+0x14c>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0xf8>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004585 	.word	0x08004585
 8004554:	080045a5 	.word	0x080045a5
 8004558:	080045a5 	.word	0x080045a5
 800455c:	080045a5 	.word	0x080045a5
 8004560:	08004595 	.word	0x08004595
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045a5 	.word	0x080045a5
 800456c:	080045a5 	.word	0x080045a5
 8004570:	0800458d 	.word	0x0800458d
 8004574:	080045a5 	.word	0x080045a5
 8004578:	080045a5 	.word	0x080045a5
 800457c:	080045a5 	.word	0x080045a5
 8004580:	0800459d 	.word	0x0800459d
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e0d8      	b.n	800473e <UART_SetConfig+0x2e6>
 800458c:	2302      	movs	r3, #2
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e0d4      	b.n	800473e <UART_SetConfig+0x2e6>
 8004594:	2304      	movs	r3, #4
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e0d0      	b.n	800473e <UART_SetConfig+0x2e6>
 800459c:	2308      	movs	r3, #8
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e0cc      	b.n	800473e <UART_SetConfig+0x2e6>
 80045a4:	2310      	movs	r3, #16
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e0c8      	b.n	800473e <UART_SetConfig+0x2e6>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a5e      	ldr	r2, [pc, #376]	; (800472c <UART_SetConfig+0x2d4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d125      	bne.n	8004602 <UART_SetConfig+0x1aa>
 80045b6:	4b5b      	ldr	r3, [pc, #364]	; (8004724 <UART_SetConfig+0x2cc>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045c0:	2b30      	cmp	r3, #48	; 0x30
 80045c2:	d016      	beq.n	80045f2 <UART_SetConfig+0x19a>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d818      	bhi.n	80045fa <UART_SetConfig+0x1a2>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d00a      	beq.n	80045e2 <UART_SetConfig+0x18a>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d814      	bhi.n	80045fa <UART_SetConfig+0x1a2>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <UART_SetConfig+0x182>
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d008      	beq.n	80045ea <UART_SetConfig+0x192>
 80045d8:	e00f      	b.n	80045fa <UART_SetConfig+0x1a2>
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e0:	e0ad      	b.n	800473e <UART_SetConfig+0x2e6>
 80045e2:	2302      	movs	r3, #2
 80045e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e8:	e0a9      	b.n	800473e <UART_SetConfig+0x2e6>
 80045ea:	2304      	movs	r3, #4
 80045ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f0:	e0a5      	b.n	800473e <UART_SetConfig+0x2e6>
 80045f2:	2308      	movs	r3, #8
 80045f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f8:	e0a1      	b.n	800473e <UART_SetConfig+0x2e6>
 80045fa:	2310      	movs	r3, #16
 80045fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004600:	e09d      	b.n	800473e <UART_SetConfig+0x2e6>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a4a      	ldr	r2, [pc, #296]	; (8004730 <UART_SetConfig+0x2d8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d125      	bne.n	8004658 <UART_SetConfig+0x200>
 800460c:	4b45      	ldr	r3, [pc, #276]	; (8004724 <UART_SetConfig+0x2cc>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004616:	2bc0      	cmp	r3, #192	; 0xc0
 8004618:	d016      	beq.n	8004648 <UART_SetConfig+0x1f0>
 800461a:	2bc0      	cmp	r3, #192	; 0xc0
 800461c:	d818      	bhi.n	8004650 <UART_SetConfig+0x1f8>
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d00a      	beq.n	8004638 <UART_SetConfig+0x1e0>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d814      	bhi.n	8004650 <UART_SetConfig+0x1f8>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <UART_SetConfig+0x1d8>
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d008      	beq.n	8004640 <UART_SetConfig+0x1e8>
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x1f8>
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004636:	e082      	b.n	800473e <UART_SetConfig+0x2e6>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463e:	e07e      	b.n	800473e <UART_SetConfig+0x2e6>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004646:	e07a      	b.n	800473e <UART_SetConfig+0x2e6>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464e:	e076      	b.n	800473e <UART_SetConfig+0x2e6>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004656:	e072      	b.n	800473e <UART_SetConfig+0x2e6>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a35      	ldr	r2, [pc, #212]	; (8004734 <UART_SetConfig+0x2dc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d12a      	bne.n	80046b8 <UART_SetConfig+0x260>
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <UART_SetConfig+0x2cc>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004670:	d01a      	beq.n	80046a8 <UART_SetConfig+0x250>
 8004672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004676:	d81b      	bhi.n	80046b0 <UART_SetConfig+0x258>
 8004678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467c:	d00c      	beq.n	8004698 <UART_SetConfig+0x240>
 800467e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004682:	d815      	bhi.n	80046b0 <UART_SetConfig+0x258>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <UART_SetConfig+0x238>
 8004688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468c:	d008      	beq.n	80046a0 <UART_SetConfig+0x248>
 800468e:	e00f      	b.n	80046b0 <UART_SetConfig+0x258>
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e052      	b.n	800473e <UART_SetConfig+0x2e6>
 8004698:	2302      	movs	r3, #2
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469e:	e04e      	b.n	800473e <UART_SetConfig+0x2e6>
 80046a0:	2304      	movs	r3, #4
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a6:	e04a      	b.n	800473e <UART_SetConfig+0x2e6>
 80046a8:	2308      	movs	r3, #8
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ae:	e046      	b.n	800473e <UART_SetConfig+0x2e6>
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b6:	e042      	b.n	800473e <UART_SetConfig+0x2e6>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a17      	ldr	r2, [pc, #92]	; (800471c <UART_SetConfig+0x2c4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d13a      	bne.n	8004738 <UART_SetConfig+0x2e0>
 80046c2:	4b18      	ldr	r3, [pc, #96]	; (8004724 <UART_SetConfig+0x2cc>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d0:	d01a      	beq.n	8004708 <UART_SetConfig+0x2b0>
 80046d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d6:	d81b      	bhi.n	8004710 <UART_SetConfig+0x2b8>
 80046d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046dc:	d00c      	beq.n	80046f8 <UART_SetConfig+0x2a0>
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e2:	d815      	bhi.n	8004710 <UART_SetConfig+0x2b8>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <UART_SetConfig+0x298>
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ec:	d008      	beq.n	8004700 <UART_SetConfig+0x2a8>
 80046ee:	e00f      	b.n	8004710 <UART_SetConfig+0x2b8>
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e022      	b.n	800473e <UART_SetConfig+0x2e6>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e01e      	b.n	800473e <UART_SetConfig+0x2e6>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e01a      	b.n	800473e <UART_SetConfig+0x2e6>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e016      	b.n	800473e <UART_SetConfig+0x2e6>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e012      	b.n	800473e <UART_SetConfig+0x2e6>
 8004718:	efff69f3 	.word	0xefff69f3
 800471c:	40008000 	.word	0x40008000
 8004720:	40013800 	.word	0x40013800
 8004724:	40021000 	.word	0x40021000
 8004728:	40004400 	.word	0x40004400
 800472c:	40004800 	.word	0x40004800
 8004730:	40004c00 	.word	0x40004c00
 8004734:	40005000 	.word	0x40005000
 8004738:	2310      	movs	r3, #16
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a9f      	ldr	r2, [pc, #636]	; (80049c0 <UART_SetConfig+0x568>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d17a      	bne.n	800483e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800474c:	2b08      	cmp	r3, #8
 800474e:	d824      	bhi.n	800479a <UART_SetConfig+0x342>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x300>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800477d 	.word	0x0800477d
 800475c:	0800479b 	.word	0x0800479b
 8004760:	08004785 	.word	0x08004785
 8004764:	0800479b 	.word	0x0800479b
 8004768:	0800478b 	.word	0x0800478b
 800476c:	0800479b 	.word	0x0800479b
 8004770:	0800479b 	.word	0x0800479b
 8004774:	0800479b 	.word	0x0800479b
 8004778:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fd fe60 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004780:	61f8      	str	r0, [r7, #28]
        break;
 8004782:	e010      	b.n	80047a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b8f      	ldr	r3, [pc, #572]	; (80049c4 <UART_SetConfig+0x56c>)
 8004786:	61fb      	str	r3, [r7, #28]
        break;
 8004788:	e00d      	b.n	80047a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fd fdc1 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 800478e:	61f8      	str	r0, [r7, #28]
        break;
 8004790:	e009      	b.n	80047a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e005      	b.n	80047a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80fb 	beq.w	80049a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d305      	bcc.n	80047ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d903      	bls.n	80047d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047d0:	e0e8      	b.n	80049a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2200      	movs	r2, #0
 80047d6:	461c      	mov	r4, r3
 80047d8:	4615      	mov	r5, r2
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	022b      	lsls	r3, r5, #8
 80047e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047e8:	0222      	lsls	r2, r4, #8
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	6849      	ldr	r1, [r1, #4]
 80047ee:	0849      	lsrs	r1, r1, #1
 80047f0:	2000      	movs	r0, #0
 80047f2:	4688      	mov	r8, r1
 80047f4:	4681      	mov	r9, r0
 80047f6:	eb12 0a08 	adds.w	sl, r2, r8
 80047fa:	eb43 0b09 	adc.w	fp, r3, r9
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800480c:	4650      	mov	r0, sl
 800480e:	4659      	mov	r1, fp
 8004810:	f7fb fd2e 	bl	8000270 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4613      	mov	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004822:	d308      	bcc.n	8004836 <UART_SetConfig+0x3de>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482a:	d204      	bcs.n	8004836 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	e0b6      	b.n	80049a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800483c:	e0b2      	b.n	80049a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004846:	d15e      	bne.n	8004906 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800484c:	2b08      	cmp	r3, #8
 800484e:	d828      	bhi.n	80048a2 <UART_SetConfig+0x44a>
 8004850:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <UART_SetConfig+0x400>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	0800487d 	.word	0x0800487d
 800485c:	08004885 	.word	0x08004885
 8004860:	0800488d 	.word	0x0800488d
 8004864:	080048a3 	.word	0x080048a3
 8004868:	08004893 	.word	0x08004893
 800486c:	080048a3 	.word	0x080048a3
 8004870:	080048a3 	.word	0x080048a3
 8004874:	080048a3 	.word	0x080048a3
 8004878:	0800489b 	.word	0x0800489b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487c:	f7fd fde0 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004880:	61f8      	str	r0, [r7, #28]
        break;
 8004882:	e014      	b.n	80048ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004884:	f7fd fdf2 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8004888:	61f8      	str	r0, [r7, #28]
        break;
 800488a:	e010      	b.n	80048ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b4d      	ldr	r3, [pc, #308]	; (80049c4 <UART_SetConfig+0x56c>)
 800488e:	61fb      	str	r3, [r7, #28]
        break;
 8004890:	e00d      	b.n	80048ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7fd fd3d 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8004896:	61f8      	str	r0, [r7, #28]
        break;
 8004898:	e009      	b.n	80048ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489e:	61fb      	str	r3, [r7, #28]
        break;
 80048a0:	e005      	b.n	80048ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d077      	beq.n	80049a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005a      	lsls	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b0f      	cmp	r3, #15
 80048ce:	d916      	bls.n	80048fe <UART_SetConfig+0x4a6>
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d6:	d212      	bcs.n	80048fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f023 030f 	bic.w	r3, r3, #15
 80048e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	8afb      	ldrh	r3, [r7, #22]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	8afa      	ldrh	r2, [r7, #22]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e052      	b.n	80049a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004904:	e04e      	b.n	80049a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800490a:	2b08      	cmp	r3, #8
 800490c:	d827      	bhi.n	800495e <UART_SetConfig+0x506>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <UART_SetConfig+0x4bc>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004939 	.word	0x08004939
 8004918:	08004941 	.word	0x08004941
 800491c:	08004949 	.word	0x08004949
 8004920:	0800495f 	.word	0x0800495f
 8004924:	0800494f 	.word	0x0800494f
 8004928:	0800495f 	.word	0x0800495f
 800492c:	0800495f 	.word	0x0800495f
 8004930:	0800495f 	.word	0x0800495f
 8004934:	08004957 	.word	0x08004957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004938:	f7fd fd82 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 800493c:	61f8      	str	r0, [r7, #28]
        break;
 800493e:	e014      	b.n	800496a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7fd fd94 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8004944:	61f8      	str	r0, [r7, #28]
        break;
 8004946:	e010      	b.n	800496a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004948:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <UART_SetConfig+0x56c>)
 800494a:	61fb      	str	r3, [r7, #28]
        break;
 800494c:	e00d      	b.n	800496a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494e:	f7fd fcdf 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8004952:	61f8      	str	r0, [r7, #28]
        break;
 8004954:	e009      	b.n	800496a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495a:	61fb      	str	r3, [r7, #28]
        break;
 800495c:	e005      	b.n	800496a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004968:	bf00      	nop
    }

    if (pclk != 0U)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d019      	beq.n	80049a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	085a      	lsrs	r2, r3, #1
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	441a      	add	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004982:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b0f      	cmp	r3, #15
 8004988:	d909      	bls.n	800499e <UART_SetConfig+0x546>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d205      	bcs.n	800499e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	e002      	b.n	80049a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3728      	adds	r7, #40	; 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	40008000 	.word	0x40008000
 80049c4:	00f42400 	.word	0x00f42400

080049c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01a      	beq.n	8004ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10a      	bne.n	8004ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b098      	sub	sp, #96	; 0x60
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b1c:	f7fc f956 	bl	8000dcc <HAL_GetTick>
 8004b20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d12e      	bne.n	8004b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f88c 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d021      	beq.n	8004b8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b68:	647b      	str	r3, [r7, #68]	; 0x44
 8004b6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e062      	b.n	8004c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d149      	bne.n	8004c30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f856 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d03c      	beq.n	8004c30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c08:	61fa      	str	r2, [r7, #28]
 8004c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	617b      	str	r3, [r7, #20]
   return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e011      	b.n	8004c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3758      	adds	r7, #88	; 0x58
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	e049      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d045      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fc f8a9 	bl	8000dcc <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e048      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d031      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d110      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f925 	bl	8004f04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e029      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cdc:	d111      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f90b 	bl	8004f04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00f      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	bf0c      	ite	eq
 8004d12:	2301      	moveq	r3, #1
 8004d14:	2300      	movne	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d0a6      	beq.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b097      	sub	sp, #92	; 0x5c
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d10e      	bne.n	8004d7e <UART_Start_Receive_IT+0x52>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <UART_Start_Receive_IT+0x48>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d72:	e02d      	b.n	8004dd0 <UART_Start_Receive_IT+0xa4>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	22ff      	movs	r2, #255	; 0xff
 8004d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d7c:	e028      	b.n	8004dd0 <UART_Start_Receive_IT+0xa4>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <UART_Start_Receive_IT+0x76>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <UART_Start_Receive_IT+0x6c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d96:	e01b      	b.n	8004dd0 <UART_Start_Receive_IT+0xa4>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	227f      	movs	r2, #127	; 0x7f
 8004d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da0:	e016      	b.n	8004dd0 <UART_Start_Receive_IT+0xa4>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004daa:	d10d      	bne.n	8004dc8 <UART_Start_Receive_IT+0x9c>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <UART_Start_Receive_IT+0x92>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	227f      	movs	r2, #127	; 0x7f
 8004db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dbc:	e008      	b.n	8004dd0 <UART_Start_Receive_IT+0xa4>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	223f      	movs	r2, #63	; 0x3f
 8004dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc6:	e003      	b.n	8004dd0 <UART_Start_Receive_IT+0xa4>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2222      	movs	r2, #34	; 0x22
 8004ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	657b      	str	r3, [r7, #84]	; 0x54
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e00:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1c:	d107      	bne.n	8004e2e <UART_Start_Receive_IT+0x102>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <UART_Start_Receive_IT+0x184>)
 8004e2a:	669a      	str	r2, [r3, #104]	; 0x68
 8004e2c:	e002      	b.n	8004e34 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <UART_Start_Receive_IT+0x188>)
 8004e32:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d019      	beq.n	8004e70 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e6      	bne.n	8004e3c <UART_Start_Receive_IT+0x110>
 8004e6e:	e018      	b.n	8004ea2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f043 0320 	orr.w	r3, r3, #32
 8004e84:	653b      	str	r3, [r7, #80]	; 0x50
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	69f9      	ldr	r1, [r7, #28]
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e6      	bne.n	8004e70 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	375c      	adds	r7, #92	; 0x5c
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	0800533d 	.word	0x0800533d
 8004eb4:	08005181 	.word	0x08005181

08004eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	613b      	str	r3, [r7, #16]
   return(result);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004ef8:	bf00      	nop
 8004efa:	3724      	adds	r7, #36	; 0x24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b095      	sub	sp, #84	; 0x54
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3308      	adds	r3, #8
 8004f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d118      	bne.n	8004fac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 0310 	bic.w	r3, r3, #16
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e6      	bne.n	8004f7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fc0:	bf00      	nop
 8004fc2:	3754      	adds	r7, #84	; 0x54
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b090      	sub	sp, #64	; 0x40
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d137      	bne.n	8005058 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
 8005008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005010:	633a      	str	r2, [r7, #48]	; 0x30
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e5      	bne.n	8004ff0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	60fb      	str	r3, [r7, #12]
   return(result);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
 800503a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	617b      	str	r3, [r7, #20]
   return(result);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e6      	bne.n	8005024 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005056:	e002      	b.n	800505e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005058:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800505a:	f7ff f9c9 	bl	80043f0 <HAL_UART_TxCpltCallback>
}
 800505e:	bf00      	nop
 8005060:	3740      	adds	r7, #64	; 0x40
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff f9c5 	bl	8004404 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005094:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d109      	bne.n	80050c0 <UART_DMAError+0x3e>
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b21      	cmp	r3, #33	; 0x21
 80050b0:	d106      	bne.n	80050c0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f7ff fefc 	bl	8004eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d109      	bne.n	80050e2 <UART_DMAError+0x60>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b22      	cmp	r3, #34	; 0x22
 80050d2:	d106      	bne.n	80050e2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80050dc:	6978      	ldr	r0, [r7, #20]
 80050de:	f7ff ff11 	bl	8004f04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e8:	f043 0210 	orr.w	r2, r3, #16
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f7ff f99a 	bl	800442c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f8:	bf00      	nop
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7ff f984 	bl	800442c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	60bb      	str	r3, [r7, #8]
   return(result);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6979      	ldr	r1, [r7, #20]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	613b      	str	r3, [r7, #16]
   return(result);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e6      	bne.n	8005134 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f93c 	bl	80043f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005178:	bf00      	nop
 800517a:	3720      	adds	r7, #32
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b09c      	sub	sp, #112	; 0x70
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800518e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005198:	2b22      	cmp	r3, #34	; 0x22
 800519a:	f040 80be 	bne.w	800531a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80051ac:	b2d9      	uxtb	r1, r3
 80051ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	400a      	ands	r2, r1
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 80a3 	bne.w	800532e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005206:	65bb      	str	r3, [r7, #88]	; 0x58
 8005208:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800520c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e6      	bne.n	80051e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3308      	adds	r3, #8
 8005220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	667b      	str	r3, [r7, #100]	; 0x64
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800523a:	647a      	str	r2, [r7, #68]	; 0x44
 800523c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a34      	ldr	r2, [pc, #208]	; (8005338 <UART_RxISR_8BIT+0x1b8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d01f      	beq.n	80052ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d018      	beq.n	80052ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	623b      	str	r3, [r7, #32]
   return(result);
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800528e:	663b      	str	r3, [r7, #96]	; 0x60
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
 800529a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800529e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d12e      	bne.n	8005312 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	617b      	str	r3, [r7, #20]
   return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e6      	bne.n	80052ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d103      	bne.n	8005302 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2210      	movs	r2, #16
 8005300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff f898 	bl	8004440 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005310:	e00d      	b.n	800532e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff f880 	bl	8004418 <HAL_UART_RxCpltCallback>
}
 8005318:	e009      	b.n	800532e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	8b1b      	ldrh	r3, [r3, #24]
 8005320:	b29a      	uxth	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0208 	orr.w	r2, r2, #8
 800532a:	b292      	uxth	r2, r2
 800532c:	831a      	strh	r2, [r3, #24]
}
 800532e:	bf00      	nop
 8005330:	3770      	adds	r7, #112	; 0x70
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40008000 	.word	0x40008000

0800533c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b09c      	sub	sp, #112	; 0x70
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800534a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005354:	2b22      	cmp	r3, #34	; 0x22
 8005356:	f040 80be 	bne.w	80054d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005360:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800536a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800536e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005372:	4013      	ands	r3, r2
 8005374:	b29a      	uxth	r2, r3
 8005376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005378:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 80a3 	bne.w	80054ea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80053b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c2:	657b      	str	r3, [r7, #84]	; 0x54
 80053c4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80053c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e6      	bne.n	80053a4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	663b      	str	r3, [r7, #96]	; 0x60
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053f6:	643a      	str	r2, [r7, #64]	; 0x40
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a34      	ldr	r2, [pc, #208]	; (80054f4 <UART_RxISR_16BIT+0x1b8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d01f      	beq.n	8005468 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d018      	beq.n	8005468 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	61fb      	str	r3, [r7, #28]
   return(result);
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800544a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005456:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546c:	2b01      	cmp	r3, #1
 800546e:	d12e      	bne.n	80054ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	60bb      	str	r3, [r7, #8]
   return(result);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0310 	bic.w	r3, r3, #16
 800548a:	65bb      	str	r3, [r7, #88]	; 0x58
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6979      	ldr	r1, [r7, #20]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	613b      	str	r3, [r7, #16]
   return(result);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d103      	bne.n	80054be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2210      	movs	r2, #16
 80054bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fe ffba 	bl	8004440 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054cc:	e00d      	b.n	80054ea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fe ffa2 	bl	8004418 <HAL_UART_RxCpltCallback>
}
 80054d4:	e009      	b.n	80054ea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	8b1b      	ldrh	r3, [r3, #24]
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0208 	orr.w	r2, r2, #8
 80054e6:	b292      	uxth	r2, r2
 80054e8:	831a      	strh	r2, [r3, #24]
}
 80054ea:	bf00      	nop
 80054ec:	3770      	adds	r7, #112	; 0x70
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40008000 	.word	0x40008000

080054f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <std>:
 800550c:	2300      	movs	r3, #0
 800550e:	b510      	push	{r4, lr}
 8005510:	4604      	mov	r4, r0
 8005512:	e9c0 3300 	strd	r3, r3, [r0]
 8005516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800551a:	6083      	str	r3, [r0, #8]
 800551c:	8181      	strh	r1, [r0, #12]
 800551e:	6643      	str	r3, [r0, #100]	; 0x64
 8005520:	81c2      	strh	r2, [r0, #14]
 8005522:	6183      	str	r3, [r0, #24]
 8005524:	4619      	mov	r1, r3
 8005526:	2208      	movs	r2, #8
 8005528:	305c      	adds	r0, #92	; 0x5c
 800552a:	f000 f8f4 	bl	8005716 <memset>
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <std+0x38>)
 8005530:	6263      	str	r3, [r4, #36]	; 0x24
 8005532:	4b05      	ldr	r3, [pc, #20]	; (8005548 <std+0x3c>)
 8005534:	62a3      	str	r3, [r4, #40]	; 0x28
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <std+0x40>)
 8005538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800553a:	4b05      	ldr	r3, [pc, #20]	; (8005550 <std+0x44>)
 800553c:	6224      	str	r4, [r4, #32]
 800553e:	6323      	str	r3, [r4, #48]	; 0x30
 8005540:	bd10      	pop	{r4, pc}
 8005542:	bf00      	nop
 8005544:	08005691 	.word	0x08005691
 8005548:	080056b3 	.word	0x080056b3
 800554c:	080056eb 	.word	0x080056eb
 8005550:	0800570f 	.word	0x0800570f

08005554 <stdio_exit_handler>:
 8005554:	4a02      	ldr	r2, [pc, #8]	; (8005560 <stdio_exit_handler+0xc>)
 8005556:	4903      	ldr	r1, [pc, #12]	; (8005564 <stdio_exit_handler+0x10>)
 8005558:	4803      	ldr	r0, [pc, #12]	; (8005568 <stdio_exit_handler+0x14>)
 800555a:	f000 b869 	b.w	8005630 <_fwalk_sglue>
 800555e:	bf00      	nop
 8005560:	2000000c 	.word	0x2000000c
 8005564:	080060b1 	.word	0x080060b1
 8005568:	20000018 	.word	0x20000018

0800556c <cleanup_stdio>:
 800556c:	6841      	ldr	r1, [r0, #4]
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <cleanup_stdio+0x34>)
 8005570:	4299      	cmp	r1, r3
 8005572:	b510      	push	{r4, lr}
 8005574:	4604      	mov	r4, r0
 8005576:	d001      	beq.n	800557c <cleanup_stdio+0x10>
 8005578:	f000 fd9a 	bl	80060b0 <_fflush_r>
 800557c:	68a1      	ldr	r1, [r4, #8]
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <cleanup_stdio+0x38>)
 8005580:	4299      	cmp	r1, r3
 8005582:	d002      	beq.n	800558a <cleanup_stdio+0x1e>
 8005584:	4620      	mov	r0, r4
 8005586:	f000 fd93 	bl	80060b0 <_fflush_r>
 800558a:	68e1      	ldr	r1, [r4, #12]
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <cleanup_stdio+0x3c>)
 800558e:	4299      	cmp	r1, r3
 8005590:	d004      	beq.n	800559c <cleanup_stdio+0x30>
 8005592:	4620      	mov	r0, r4
 8005594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005598:	f000 bd8a 	b.w	80060b0 <_fflush_r>
 800559c:	bd10      	pop	{r4, pc}
 800559e:	bf00      	nop
 80055a0:	200001b0 	.word	0x200001b0
 80055a4:	20000218 	.word	0x20000218
 80055a8:	20000280 	.word	0x20000280

080055ac <global_stdio_init.part.0>:
 80055ac:	b510      	push	{r4, lr}
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <global_stdio_init.part.0+0x30>)
 80055b0:	4c0b      	ldr	r4, [pc, #44]	; (80055e0 <global_stdio_init.part.0+0x34>)
 80055b2:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <global_stdio_init.part.0+0x38>)
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	4620      	mov	r0, r4
 80055b8:	2200      	movs	r2, #0
 80055ba:	2104      	movs	r1, #4
 80055bc:	f7ff ffa6 	bl	800550c <std>
 80055c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80055c4:	2201      	movs	r2, #1
 80055c6:	2109      	movs	r1, #9
 80055c8:	f7ff ffa0 	bl	800550c <std>
 80055cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80055d0:	2202      	movs	r2, #2
 80055d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d6:	2112      	movs	r1, #18
 80055d8:	f7ff bf98 	b.w	800550c <std>
 80055dc:	200002e8 	.word	0x200002e8
 80055e0:	200001b0 	.word	0x200001b0
 80055e4:	08005555 	.word	0x08005555

080055e8 <__sfp_lock_acquire>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__sfp_lock_acquire+0x8>)
 80055ea:	f000 b90d 	b.w	8005808 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	200002f1 	.word	0x200002f1

080055f4 <__sfp_lock_release>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__sfp_lock_release+0x8>)
 80055f6:	f000 b908 	b.w	800580a <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	200002f1 	.word	0x200002f1

08005600 <__sinit>:
 8005600:	b510      	push	{r4, lr}
 8005602:	4604      	mov	r4, r0
 8005604:	f7ff fff0 	bl	80055e8 <__sfp_lock_acquire>
 8005608:	6a23      	ldr	r3, [r4, #32]
 800560a:	b11b      	cbz	r3, 8005614 <__sinit+0x14>
 800560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005610:	f7ff bff0 	b.w	80055f4 <__sfp_lock_release>
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <__sinit+0x28>)
 8005616:	6223      	str	r3, [r4, #32]
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <__sinit+0x2c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f5      	bne.n	800560c <__sinit+0xc>
 8005620:	f7ff ffc4 	bl	80055ac <global_stdio_init.part.0>
 8005624:	e7f2      	b.n	800560c <__sinit+0xc>
 8005626:	bf00      	nop
 8005628:	0800556d 	.word	0x0800556d
 800562c:	200002e8 	.word	0x200002e8

08005630 <_fwalk_sglue>:
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005634:	4607      	mov	r7, r0
 8005636:	4688      	mov	r8, r1
 8005638:	4614      	mov	r4, r2
 800563a:	2600      	movs	r6, #0
 800563c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005640:	f1b9 0901 	subs.w	r9, r9, #1
 8005644:	d505      	bpl.n	8005652 <_fwalk_sglue+0x22>
 8005646:	6824      	ldr	r4, [r4, #0]
 8005648:	2c00      	cmp	r4, #0
 800564a:	d1f7      	bne.n	800563c <_fwalk_sglue+0xc>
 800564c:	4630      	mov	r0, r6
 800564e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d907      	bls.n	8005668 <_fwalk_sglue+0x38>
 8005658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800565c:	3301      	adds	r3, #1
 800565e:	d003      	beq.n	8005668 <_fwalk_sglue+0x38>
 8005660:	4629      	mov	r1, r5
 8005662:	4638      	mov	r0, r7
 8005664:	47c0      	blx	r8
 8005666:	4306      	orrs	r6, r0
 8005668:	3568      	adds	r5, #104	; 0x68
 800566a:	e7e9      	b.n	8005640 <_fwalk_sglue+0x10>

0800566c <iprintf>:
 800566c:	b40f      	push	{r0, r1, r2, r3}
 800566e:	b507      	push	{r0, r1, r2, lr}
 8005670:	4906      	ldr	r1, [pc, #24]	; (800568c <iprintf+0x20>)
 8005672:	ab04      	add	r3, sp, #16
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	f853 2b04 	ldr.w	r2, [r3], #4
 800567a:	6881      	ldr	r1, [r0, #8]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	f000 f9e7 	bl	8005a50 <_vfiprintf_r>
 8005682:	b003      	add	sp, #12
 8005684:	f85d eb04 	ldr.w	lr, [sp], #4
 8005688:	b004      	add	sp, #16
 800568a:	4770      	bx	lr
 800568c:	20000064 	.word	0x20000064

08005690 <__sread>:
 8005690:	b510      	push	{r4, lr}
 8005692:	460c      	mov	r4, r1
 8005694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005698:	f000 f868 	bl	800576c <_read_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	bfab      	itete	ge
 80056a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056a2:	89a3      	ldrhlt	r3, [r4, #12]
 80056a4:	181b      	addge	r3, r3, r0
 80056a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056aa:	bfac      	ite	ge
 80056ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ae:	81a3      	strhlt	r3, [r4, #12]
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <__swrite>:
 80056b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b6:	461f      	mov	r7, r3
 80056b8:	898b      	ldrh	r3, [r1, #12]
 80056ba:	05db      	lsls	r3, r3, #23
 80056bc:	4605      	mov	r5, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	4616      	mov	r6, r2
 80056c2:	d505      	bpl.n	80056d0 <__swrite+0x1e>
 80056c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c8:	2302      	movs	r3, #2
 80056ca:	2200      	movs	r2, #0
 80056cc:	f000 f83c 	bl	8005748 <_lseek_r>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	4632      	mov	r2, r6
 80056de:	463b      	mov	r3, r7
 80056e0:	4628      	mov	r0, r5
 80056e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e6:	f000 b853 	b.w	8005790 <_write_r>

080056ea <__sseek>:
 80056ea:	b510      	push	{r4, lr}
 80056ec:	460c      	mov	r4, r1
 80056ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f2:	f000 f829 	bl	8005748 <_lseek_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	bf15      	itete	ne
 80056fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80056fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005706:	81a3      	strheq	r3, [r4, #12]
 8005708:	bf18      	it	ne
 800570a:	81a3      	strhne	r3, [r4, #12]
 800570c:	bd10      	pop	{r4, pc}

0800570e <__sclose>:
 800570e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005712:	f000 b809 	b.w	8005728 <_close_r>

08005716 <memset>:
 8005716:	4402      	add	r2, r0
 8005718:	4603      	mov	r3, r0
 800571a:	4293      	cmp	r3, r2
 800571c:	d100      	bne.n	8005720 <memset+0xa>
 800571e:	4770      	bx	lr
 8005720:	f803 1b01 	strb.w	r1, [r3], #1
 8005724:	e7f9      	b.n	800571a <memset+0x4>
	...

08005728 <_close_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d06      	ldr	r5, [pc, #24]	; (8005744 <_close_r+0x1c>)
 800572c:	2300      	movs	r3, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fb fa33 	bl	8000b9e <_close>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_close_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_close_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	200002ec 	.word	0x200002ec

08005748 <_lseek_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d07      	ldr	r5, [pc, #28]	; (8005768 <_lseek_r+0x20>)
 800574c:	4604      	mov	r4, r0
 800574e:	4608      	mov	r0, r1
 8005750:	4611      	mov	r1, r2
 8005752:	2200      	movs	r2, #0
 8005754:	602a      	str	r2, [r5, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f7fb fa48 	bl	8000bec <_lseek>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_lseek_r+0x1e>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_lseek_r+0x1e>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	200002ec 	.word	0x200002ec

0800576c <_read_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	; (800578c <_read_r+0x20>)
 8005770:	4604      	mov	r4, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fb f9f2 	bl	8000b64 <_read>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_read_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_read_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	200002ec 	.word	0x200002ec

08005790 <_write_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d07      	ldr	r5, [pc, #28]	; (80057b0 <_write_r+0x20>)
 8005794:	4604      	mov	r4, r0
 8005796:	4608      	mov	r0, r1
 8005798:	4611      	mov	r1, r2
 800579a:	2200      	movs	r2, #0
 800579c:	602a      	str	r2, [r5, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fa fee4 	bl	800056c <_write>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_write_r+0x1e>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_write_r+0x1e>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	200002ec 	.word	0x200002ec

080057b4 <__errno>:
 80057b4:	4b01      	ldr	r3, [pc, #4]	; (80057bc <__errno+0x8>)
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000064 	.word	0x20000064

080057c0 <__libc_init_array>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4d0d      	ldr	r5, [pc, #52]	; (80057f8 <__libc_init_array+0x38>)
 80057c4:	4c0d      	ldr	r4, [pc, #52]	; (80057fc <__libc_init_array+0x3c>)
 80057c6:	1b64      	subs	r4, r4, r5
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	2600      	movs	r6, #0
 80057cc:	42a6      	cmp	r6, r4
 80057ce:	d109      	bne.n	80057e4 <__libc_init_array+0x24>
 80057d0:	4d0b      	ldr	r5, [pc, #44]	; (8005800 <__libc_init_array+0x40>)
 80057d2:	4c0c      	ldr	r4, [pc, #48]	; (8005804 <__libc_init_array+0x44>)
 80057d4:	f000 fdbe 	bl	8006354 <_init>
 80057d8:	1b64      	subs	r4, r4, r5
 80057da:	10a4      	asrs	r4, r4, #2
 80057dc:	2600      	movs	r6, #0
 80057de:	42a6      	cmp	r6, r4
 80057e0:	d105      	bne.n	80057ee <__libc_init_array+0x2e>
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e8:	4798      	blx	r3
 80057ea:	3601      	adds	r6, #1
 80057ec:	e7ee      	b.n	80057cc <__libc_init_array+0xc>
 80057ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f2:	4798      	blx	r3
 80057f4:	3601      	adds	r6, #1
 80057f6:	e7f2      	b.n	80057de <__libc_init_array+0x1e>
 80057f8:	08006410 	.word	0x08006410
 80057fc:	08006410 	.word	0x08006410
 8005800:	08006410 	.word	0x08006410
 8005804:	08006414 	.word	0x08006414

08005808 <__retarget_lock_acquire_recursive>:
 8005808:	4770      	bx	lr

0800580a <__retarget_lock_release_recursive>:
 800580a:	4770      	bx	lr

0800580c <_free_r>:
 800580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800580e:	2900      	cmp	r1, #0
 8005810:	d044      	beq.n	800589c <_free_r+0x90>
 8005812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005816:	9001      	str	r0, [sp, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f1a1 0404 	sub.w	r4, r1, #4
 800581e:	bfb8      	it	lt
 8005820:	18e4      	addlt	r4, r4, r3
 8005822:	f000 f8df 	bl	80059e4 <__malloc_lock>
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <_free_r+0x94>)
 8005828:	9801      	ldr	r0, [sp, #4]
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	b933      	cbnz	r3, 800583c <_free_r+0x30>
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	6014      	str	r4, [r2, #0]
 8005832:	b003      	add	sp, #12
 8005834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005838:	f000 b8da 	b.w	80059f0 <__malloc_unlock>
 800583c:	42a3      	cmp	r3, r4
 800583e:	d908      	bls.n	8005852 <_free_r+0x46>
 8005840:	6825      	ldr	r5, [r4, #0]
 8005842:	1961      	adds	r1, r4, r5
 8005844:	428b      	cmp	r3, r1
 8005846:	bf01      	itttt	eq
 8005848:	6819      	ldreq	r1, [r3, #0]
 800584a:	685b      	ldreq	r3, [r3, #4]
 800584c:	1949      	addeq	r1, r1, r5
 800584e:	6021      	streq	r1, [r4, #0]
 8005850:	e7ed      	b.n	800582e <_free_r+0x22>
 8005852:	461a      	mov	r2, r3
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b10b      	cbz	r3, 800585c <_free_r+0x50>
 8005858:	42a3      	cmp	r3, r4
 800585a:	d9fa      	bls.n	8005852 <_free_r+0x46>
 800585c:	6811      	ldr	r1, [r2, #0]
 800585e:	1855      	adds	r5, r2, r1
 8005860:	42a5      	cmp	r5, r4
 8005862:	d10b      	bne.n	800587c <_free_r+0x70>
 8005864:	6824      	ldr	r4, [r4, #0]
 8005866:	4421      	add	r1, r4
 8005868:	1854      	adds	r4, r2, r1
 800586a:	42a3      	cmp	r3, r4
 800586c:	6011      	str	r1, [r2, #0]
 800586e:	d1e0      	bne.n	8005832 <_free_r+0x26>
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	6053      	str	r3, [r2, #4]
 8005876:	440c      	add	r4, r1
 8005878:	6014      	str	r4, [r2, #0]
 800587a:	e7da      	b.n	8005832 <_free_r+0x26>
 800587c:	d902      	bls.n	8005884 <_free_r+0x78>
 800587e:	230c      	movs	r3, #12
 8005880:	6003      	str	r3, [r0, #0]
 8005882:	e7d6      	b.n	8005832 <_free_r+0x26>
 8005884:	6825      	ldr	r5, [r4, #0]
 8005886:	1961      	adds	r1, r4, r5
 8005888:	428b      	cmp	r3, r1
 800588a:	bf04      	itt	eq
 800588c:	6819      	ldreq	r1, [r3, #0]
 800588e:	685b      	ldreq	r3, [r3, #4]
 8005890:	6063      	str	r3, [r4, #4]
 8005892:	bf04      	itt	eq
 8005894:	1949      	addeq	r1, r1, r5
 8005896:	6021      	streq	r1, [r4, #0]
 8005898:	6054      	str	r4, [r2, #4]
 800589a:	e7ca      	b.n	8005832 <_free_r+0x26>
 800589c:	b003      	add	sp, #12
 800589e:	bd30      	pop	{r4, r5, pc}
 80058a0:	200002f4 	.word	0x200002f4

080058a4 <sbrk_aligned>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4e0e      	ldr	r6, [pc, #56]	; (80058e0 <sbrk_aligned+0x3c>)
 80058a8:	460c      	mov	r4, r1
 80058aa:	6831      	ldr	r1, [r6, #0]
 80058ac:	4605      	mov	r5, r0
 80058ae:	b911      	cbnz	r1, 80058b6 <sbrk_aligned+0x12>
 80058b0:	f000 fcbc 	bl	800622c <_sbrk_r>
 80058b4:	6030      	str	r0, [r6, #0]
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fcb7 	bl	800622c <_sbrk_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d00a      	beq.n	80058d8 <sbrk_aligned+0x34>
 80058c2:	1cc4      	adds	r4, r0, #3
 80058c4:	f024 0403 	bic.w	r4, r4, #3
 80058c8:	42a0      	cmp	r0, r4
 80058ca:	d007      	beq.n	80058dc <sbrk_aligned+0x38>
 80058cc:	1a21      	subs	r1, r4, r0
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fcac 	bl	800622c <_sbrk_r>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d101      	bne.n	80058dc <sbrk_aligned+0x38>
 80058d8:	f04f 34ff 	mov.w	r4, #4294967295
 80058dc:	4620      	mov	r0, r4
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	200002f8 	.word	0x200002f8

080058e4 <_malloc_r>:
 80058e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e8:	1ccd      	adds	r5, r1, #3
 80058ea:	f025 0503 	bic.w	r5, r5, #3
 80058ee:	3508      	adds	r5, #8
 80058f0:	2d0c      	cmp	r5, #12
 80058f2:	bf38      	it	cc
 80058f4:	250c      	movcc	r5, #12
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	4607      	mov	r7, r0
 80058fa:	db01      	blt.n	8005900 <_malloc_r+0x1c>
 80058fc:	42a9      	cmp	r1, r5
 80058fe:	d905      	bls.n	800590c <_malloc_r+0x28>
 8005900:	230c      	movs	r3, #12
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	2600      	movs	r6, #0
 8005906:	4630      	mov	r0, r6
 8005908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059e0 <_malloc_r+0xfc>
 8005910:	f000 f868 	bl	80059e4 <__malloc_lock>
 8005914:	f8d8 3000 	ldr.w	r3, [r8]
 8005918:	461c      	mov	r4, r3
 800591a:	bb5c      	cbnz	r4, 8005974 <_malloc_r+0x90>
 800591c:	4629      	mov	r1, r5
 800591e:	4638      	mov	r0, r7
 8005920:	f7ff ffc0 	bl	80058a4 <sbrk_aligned>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	4604      	mov	r4, r0
 8005928:	d155      	bne.n	80059d6 <_malloc_r+0xf2>
 800592a:	f8d8 4000 	ldr.w	r4, [r8]
 800592e:	4626      	mov	r6, r4
 8005930:	2e00      	cmp	r6, #0
 8005932:	d145      	bne.n	80059c0 <_malloc_r+0xdc>
 8005934:	2c00      	cmp	r4, #0
 8005936:	d048      	beq.n	80059ca <_malloc_r+0xe6>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	4631      	mov	r1, r6
 800593c:	4638      	mov	r0, r7
 800593e:	eb04 0903 	add.w	r9, r4, r3
 8005942:	f000 fc73 	bl	800622c <_sbrk_r>
 8005946:	4581      	cmp	r9, r0
 8005948:	d13f      	bne.n	80059ca <_malloc_r+0xe6>
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	1a6d      	subs	r5, r5, r1
 800594e:	4629      	mov	r1, r5
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff ffa7 	bl	80058a4 <sbrk_aligned>
 8005956:	3001      	adds	r0, #1
 8005958:	d037      	beq.n	80059ca <_malloc_r+0xe6>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	442b      	add	r3, r5
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	f8d8 3000 	ldr.w	r3, [r8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d038      	beq.n	80059da <_malloc_r+0xf6>
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	42a2      	cmp	r2, r4
 800596c:	d12b      	bne.n	80059c6 <_malloc_r+0xe2>
 800596e:	2200      	movs	r2, #0
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	e00f      	b.n	8005994 <_malloc_r+0xb0>
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	1b52      	subs	r2, r2, r5
 8005978:	d41f      	bmi.n	80059ba <_malloc_r+0xd6>
 800597a:	2a0b      	cmp	r2, #11
 800597c:	d917      	bls.n	80059ae <_malloc_r+0xca>
 800597e:	1961      	adds	r1, r4, r5
 8005980:	42a3      	cmp	r3, r4
 8005982:	6025      	str	r5, [r4, #0]
 8005984:	bf18      	it	ne
 8005986:	6059      	strne	r1, [r3, #4]
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	bf08      	it	eq
 800598c:	f8c8 1000 	streq.w	r1, [r8]
 8005990:	5162      	str	r2, [r4, r5]
 8005992:	604b      	str	r3, [r1, #4]
 8005994:	4638      	mov	r0, r7
 8005996:	f104 060b 	add.w	r6, r4, #11
 800599a:	f000 f829 	bl	80059f0 <__malloc_unlock>
 800599e:	f026 0607 	bic.w	r6, r6, #7
 80059a2:	1d23      	adds	r3, r4, #4
 80059a4:	1af2      	subs	r2, r6, r3
 80059a6:	d0ae      	beq.n	8005906 <_malloc_r+0x22>
 80059a8:	1b9b      	subs	r3, r3, r6
 80059aa:	50a3      	str	r3, [r4, r2]
 80059ac:	e7ab      	b.n	8005906 <_malloc_r+0x22>
 80059ae:	42a3      	cmp	r3, r4
 80059b0:	6862      	ldr	r2, [r4, #4]
 80059b2:	d1dd      	bne.n	8005970 <_malloc_r+0x8c>
 80059b4:	f8c8 2000 	str.w	r2, [r8]
 80059b8:	e7ec      	b.n	8005994 <_malloc_r+0xb0>
 80059ba:	4623      	mov	r3, r4
 80059bc:	6864      	ldr	r4, [r4, #4]
 80059be:	e7ac      	b.n	800591a <_malloc_r+0x36>
 80059c0:	4634      	mov	r4, r6
 80059c2:	6876      	ldr	r6, [r6, #4]
 80059c4:	e7b4      	b.n	8005930 <_malloc_r+0x4c>
 80059c6:	4613      	mov	r3, r2
 80059c8:	e7cc      	b.n	8005964 <_malloc_r+0x80>
 80059ca:	230c      	movs	r3, #12
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4638      	mov	r0, r7
 80059d0:	f000 f80e 	bl	80059f0 <__malloc_unlock>
 80059d4:	e797      	b.n	8005906 <_malloc_r+0x22>
 80059d6:	6025      	str	r5, [r4, #0]
 80059d8:	e7dc      	b.n	8005994 <_malloc_r+0xb0>
 80059da:	605b      	str	r3, [r3, #4]
 80059dc:	deff      	udf	#255	; 0xff
 80059de:	bf00      	nop
 80059e0:	200002f4 	.word	0x200002f4

080059e4 <__malloc_lock>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__malloc_lock+0x8>)
 80059e6:	f7ff bf0f 	b.w	8005808 <__retarget_lock_acquire_recursive>
 80059ea:	bf00      	nop
 80059ec:	200002f0 	.word	0x200002f0

080059f0 <__malloc_unlock>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__malloc_unlock+0x8>)
 80059f2:	f7ff bf0a 	b.w	800580a <__retarget_lock_release_recursive>
 80059f6:	bf00      	nop
 80059f8:	200002f0 	.word	0x200002f0

080059fc <__sfputc_r>:
 80059fc:	6893      	ldr	r3, [r2, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	b410      	push	{r4}
 8005a04:	6093      	str	r3, [r2, #8]
 8005a06:	da08      	bge.n	8005a1a <__sfputc_r+0x1e>
 8005a08:	6994      	ldr	r4, [r2, #24]
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	db01      	blt.n	8005a12 <__sfputc_r+0x16>
 8005a0e:	290a      	cmp	r1, #10
 8005a10:	d103      	bne.n	8005a1a <__sfputc_r+0x1e>
 8005a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a16:	f000 bb73 	b.w	8006100 <__swbuf_r>
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	1c58      	adds	r0, r3, #1
 8005a1e:	6010      	str	r0, [r2, #0]
 8005a20:	7019      	strb	r1, [r3, #0]
 8005a22:	4608      	mov	r0, r1
 8005a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <__sfputs_r>:
 8005a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	4614      	mov	r4, r2
 8005a32:	18d5      	adds	r5, r2, r3
 8005a34:	42ac      	cmp	r4, r5
 8005a36:	d101      	bne.n	8005a3c <__sfputs_r+0x12>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e007      	b.n	8005a4c <__sfputs_r+0x22>
 8005a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a40:	463a      	mov	r2, r7
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff ffda 	bl	80059fc <__sfputc_r>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d1f3      	bne.n	8005a34 <__sfputs_r+0xa>
 8005a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a50 <_vfiprintf_r>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	460d      	mov	r5, r1
 8005a56:	b09d      	sub	sp, #116	; 0x74
 8005a58:	4614      	mov	r4, r2
 8005a5a:	4698      	mov	r8, r3
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	b118      	cbz	r0, 8005a68 <_vfiprintf_r+0x18>
 8005a60:	6a03      	ldr	r3, [r0, #32]
 8005a62:	b90b      	cbnz	r3, 8005a68 <_vfiprintf_r+0x18>
 8005a64:	f7ff fdcc 	bl	8005600 <__sinit>
 8005a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a6a:	07d9      	lsls	r1, r3, #31
 8005a6c:	d405      	bmi.n	8005a7a <_vfiprintf_r+0x2a>
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	059a      	lsls	r2, r3, #22
 8005a72:	d402      	bmi.n	8005a7a <_vfiprintf_r+0x2a>
 8005a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a76:	f7ff fec7 	bl	8005808 <__retarget_lock_acquire_recursive>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	071b      	lsls	r3, r3, #28
 8005a7e:	d501      	bpl.n	8005a84 <_vfiprintf_r+0x34>
 8005a80:	692b      	ldr	r3, [r5, #16]
 8005a82:	b99b      	cbnz	r3, 8005aac <_vfiprintf_r+0x5c>
 8005a84:	4629      	mov	r1, r5
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 fb78 	bl	800617c <__swsetup_r>
 8005a8c:	b170      	cbz	r0, 8005aac <_vfiprintf_r+0x5c>
 8005a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a90:	07dc      	lsls	r4, r3, #31
 8005a92:	d504      	bpl.n	8005a9e <_vfiprintf_r+0x4e>
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	b01d      	add	sp, #116	; 0x74
 8005a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	0598      	lsls	r0, r3, #22
 8005aa2:	d4f7      	bmi.n	8005a94 <_vfiprintf_r+0x44>
 8005aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aa6:	f7ff feb0 	bl	800580a <__retarget_lock_release_recursive>
 8005aaa:	e7f3      	b.n	8005a94 <_vfiprintf_r+0x44>
 8005aac:	2300      	movs	r3, #0
 8005aae:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aba:	2330      	movs	r3, #48	; 0x30
 8005abc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c70 <_vfiprintf_r+0x220>
 8005ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ac4:	f04f 0901 	mov.w	r9, #1
 8005ac8:	4623      	mov	r3, r4
 8005aca:	469a      	mov	sl, r3
 8005acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_vfiprintf_r+0x86>
 8005ad2:	2a25      	cmp	r2, #37	; 0x25
 8005ad4:	d1f9      	bne.n	8005aca <_vfiprintf_r+0x7a>
 8005ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8005ada:	d00b      	beq.n	8005af4 <_vfiprintf_r+0xa4>
 8005adc:	465b      	mov	r3, fp
 8005ade:	4622      	mov	r2, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7ff ffa1 	bl	8005a2a <__sfputs_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f000 80a9 	beq.w	8005c40 <_vfiprintf_r+0x1f0>
 8005aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af0:	445a      	add	r2, fp
 8005af2:	9209      	str	r2, [sp, #36]	; 0x24
 8005af4:	f89a 3000 	ldrb.w	r3, [sl]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80a1 	beq.w	8005c40 <_vfiprintf_r+0x1f0>
 8005afe:	2300      	movs	r3, #0
 8005b00:	f04f 32ff 	mov.w	r2, #4294967295
 8005b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b08:	f10a 0a01 	add.w	sl, sl, #1
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	9307      	str	r3, [sp, #28]
 8005b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b14:	931a      	str	r3, [sp, #104]	; 0x68
 8005b16:	4654      	mov	r4, sl
 8005b18:	2205      	movs	r2, #5
 8005b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1e:	4854      	ldr	r0, [pc, #336]	; (8005c70 <_vfiprintf_r+0x220>)
 8005b20:	f7fa fb56 	bl	80001d0 <memchr>
 8005b24:	9a04      	ldr	r2, [sp, #16]
 8005b26:	b9d8      	cbnz	r0, 8005b60 <_vfiprintf_r+0x110>
 8005b28:	06d1      	lsls	r1, r2, #27
 8005b2a:	bf44      	itt	mi
 8005b2c:	2320      	movmi	r3, #32
 8005b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b32:	0713      	lsls	r3, r2, #28
 8005b34:	bf44      	itt	mi
 8005b36:	232b      	movmi	r3, #43	; 0x2b
 8005b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b40:	2b2a      	cmp	r3, #42	; 0x2a
 8005b42:	d015      	beq.n	8005b70 <_vfiprintf_r+0x120>
 8005b44:	9a07      	ldr	r2, [sp, #28]
 8005b46:	4654      	mov	r4, sl
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f04f 0c0a 	mov.w	ip, #10
 8005b4e:	4621      	mov	r1, r4
 8005b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b54:	3b30      	subs	r3, #48	; 0x30
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d94d      	bls.n	8005bf6 <_vfiprintf_r+0x1a6>
 8005b5a:	b1b0      	cbz	r0, 8005b8a <_vfiprintf_r+0x13a>
 8005b5c:	9207      	str	r2, [sp, #28]
 8005b5e:	e014      	b.n	8005b8a <_vfiprintf_r+0x13a>
 8005b60:	eba0 0308 	sub.w	r3, r0, r8
 8005b64:	fa09 f303 	lsl.w	r3, r9, r3
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	46a2      	mov	sl, r4
 8005b6e:	e7d2      	b.n	8005b16 <_vfiprintf_r+0xc6>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	1d19      	adds	r1, r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	9103      	str	r1, [sp, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bfbb      	ittet	lt
 8005b7c:	425b      	neglt	r3, r3
 8005b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b82:	9307      	strge	r3, [sp, #28]
 8005b84:	9307      	strlt	r3, [sp, #28]
 8005b86:	bfb8      	it	lt
 8005b88:	9204      	strlt	r2, [sp, #16]
 8005b8a:	7823      	ldrb	r3, [r4, #0]
 8005b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b8e:	d10c      	bne.n	8005baa <_vfiprintf_r+0x15a>
 8005b90:	7863      	ldrb	r3, [r4, #1]
 8005b92:	2b2a      	cmp	r3, #42	; 0x2a
 8005b94:	d134      	bne.n	8005c00 <_vfiprintf_r+0x1b0>
 8005b96:	9b03      	ldr	r3, [sp, #12]
 8005b98:	1d1a      	adds	r2, r3, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	9203      	str	r2, [sp, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bfb8      	it	lt
 8005ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ba6:	3402      	adds	r4, #2
 8005ba8:	9305      	str	r3, [sp, #20]
 8005baa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c80 <_vfiprintf_r+0x230>
 8005bae:	7821      	ldrb	r1, [r4, #0]
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	f7fa fb0c 	bl	80001d0 <memchr>
 8005bb8:	b138      	cbz	r0, 8005bca <_vfiprintf_r+0x17a>
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	eba0 000a 	sub.w	r0, r0, sl
 8005bc0:	2240      	movs	r2, #64	; 0x40
 8005bc2:	4082      	lsls	r2, r0
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	3401      	adds	r4, #1
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bce:	4829      	ldr	r0, [pc, #164]	; (8005c74 <_vfiprintf_r+0x224>)
 8005bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bd4:	2206      	movs	r2, #6
 8005bd6:	f7fa fafb 	bl	80001d0 <memchr>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d03f      	beq.n	8005c5e <_vfiprintf_r+0x20e>
 8005bde:	4b26      	ldr	r3, [pc, #152]	; (8005c78 <_vfiprintf_r+0x228>)
 8005be0:	bb1b      	cbnz	r3, 8005c2a <_vfiprintf_r+0x1da>
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	3307      	adds	r3, #7
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	3308      	adds	r3, #8
 8005bec:	9303      	str	r3, [sp, #12]
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	443b      	add	r3, r7
 8005bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf4:	e768      	b.n	8005ac8 <_vfiprintf_r+0x78>
 8005bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	e7a6      	b.n	8005b4e <_vfiprintf_r+0xfe>
 8005c00:	2300      	movs	r3, #0
 8005c02:	3401      	adds	r4, #1
 8005c04:	9305      	str	r3, [sp, #20]
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 0c0a 	mov.w	ip, #10
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c12:	3a30      	subs	r2, #48	; 0x30
 8005c14:	2a09      	cmp	r2, #9
 8005c16:	d903      	bls.n	8005c20 <_vfiprintf_r+0x1d0>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0c6      	beq.n	8005baa <_vfiprintf_r+0x15a>
 8005c1c:	9105      	str	r1, [sp, #20]
 8005c1e:	e7c4      	b.n	8005baa <_vfiprintf_r+0x15a>
 8005c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c24:	4604      	mov	r4, r0
 8005c26:	2301      	movs	r3, #1
 8005c28:	e7f0      	b.n	8005c0c <_vfiprintf_r+0x1bc>
 8005c2a:	ab03      	add	r3, sp, #12
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	462a      	mov	r2, r5
 8005c30:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <_vfiprintf_r+0x22c>)
 8005c32:	a904      	add	r1, sp, #16
 8005c34:	4630      	mov	r0, r6
 8005c36:	f3af 8000 	nop.w
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	1c78      	adds	r0, r7, #1
 8005c3e:	d1d6      	bne.n	8005bee <_vfiprintf_r+0x19e>
 8005c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c42:	07d9      	lsls	r1, r3, #31
 8005c44:	d405      	bmi.n	8005c52 <_vfiprintf_r+0x202>
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	059a      	lsls	r2, r3, #22
 8005c4a:	d402      	bmi.n	8005c52 <_vfiprintf_r+0x202>
 8005c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c4e:	f7ff fddc 	bl	800580a <__retarget_lock_release_recursive>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	065b      	lsls	r3, r3, #25
 8005c56:	f53f af1d 	bmi.w	8005a94 <_vfiprintf_r+0x44>
 8005c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c5c:	e71c      	b.n	8005a98 <_vfiprintf_r+0x48>
 8005c5e:	ab03      	add	r3, sp, #12
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	462a      	mov	r2, r5
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_vfiprintf_r+0x22c>)
 8005c66:	a904      	add	r1, sp, #16
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 f879 	bl	8005d60 <_printf_i>
 8005c6e:	e7e4      	b.n	8005c3a <_vfiprintf_r+0x1ea>
 8005c70:	080063d4 	.word	0x080063d4
 8005c74:	080063de 	.word	0x080063de
 8005c78:	00000000 	.word	0x00000000
 8005c7c:	08005a2b 	.word	0x08005a2b
 8005c80:	080063da 	.word	0x080063da

08005c84 <_printf_common>:
 8005c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	4616      	mov	r6, r2
 8005c8a:	4699      	mov	r9, r3
 8005c8c:	688a      	ldr	r2, [r1, #8]
 8005c8e:	690b      	ldr	r3, [r1, #16]
 8005c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c94:	4293      	cmp	r3, r2
 8005c96:	bfb8      	it	lt
 8005c98:	4613      	movlt	r3, r2
 8005c9a:	6033      	str	r3, [r6, #0]
 8005c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	b10a      	cbz	r2, 8005caa <_printf_common+0x26>
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	6033      	str	r3, [r6, #0]
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	0699      	lsls	r1, r3, #26
 8005cae:	bf42      	ittt	mi
 8005cb0:	6833      	ldrmi	r3, [r6, #0]
 8005cb2:	3302      	addmi	r3, #2
 8005cb4:	6033      	strmi	r3, [r6, #0]
 8005cb6:	6825      	ldr	r5, [r4, #0]
 8005cb8:	f015 0506 	ands.w	r5, r5, #6
 8005cbc:	d106      	bne.n	8005ccc <_printf_common+0x48>
 8005cbe:	f104 0a19 	add.w	sl, r4, #25
 8005cc2:	68e3      	ldr	r3, [r4, #12]
 8005cc4:	6832      	ldr	r2, [r6, #0]
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	42ab      	cmp	r3, r5
 8005cca:	dc26      	bgt.n	8005d1a <_printf_common+0x96>
 8005ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd0:	1e13      	subs	r3, r2, #0
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	bf18      	it	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	0692      	lsls	r2, r2, #26
 8005cda:	d42b      	bmi.n	8005d34 <_printf_common+0xb0>
 8005cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	47c0      	blx	r8
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d01e      	beq.n	8005d28 <_printf_common+0xa4>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	f003 0306 	and.w	r3, r3, #6
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	bf02      	ittt	eq
 8005cf6:	68e5      	ldreq	r5, [r4, #12]
 8005cf8:	6833      	ldreq	r3, [r6, #0]
 8005cfa:	1aed      	subeq	r5, r5, r3
 8005cfc:	68a3      	ldr	r3, [r4, #8]
 8005cfe:	bf0c      	ite	eq
 8005d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d04:	2500      	movne	r5, #0
 8005d06:	4293      	cmp	r3, r2
 8005d08:	bfc4      	itt	gt
 8005d0a:	1a9b      	subgt	r3, r3, r2
 8005d0c:	18ed      	addgt	r5, r5, r3
 8005d0e:	2600      	movs	r6, #0
 8005d10:	341a      	adds	r4, #26
 8005d12:	42b5      	cmp	r5, r6
 8005d14:	d11a      	bne.n	8005d4c <_printf_common+0xc8>
 8005d16:	2000      	movs	r0, #0
 8005d18:	e008      	b.n	8005d2c <_printf_common+0xa8>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4652      	mov	r2, sl
 8005d1e:	4649      	mov	r1, r9
 8005d20:	4638      	mov	r0, r7
 8005d22:	47c0      	blx	r8
 8005d24:	3001      	adds	r0, #1
 8005d26:	d103      	bne.n	8005d30 <_printf_common+0xac>
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d30:	3501      	adds	r5, #1
 8005d32:	e7c6      	b.n	8005cc2 <_printf_common+0x3e>
 8005d34:	18e1      	adds	r1, r4, r3
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	2030      	movs	r0, #48	; 0x30
 8005d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d3e:	4422      	add	r2, r4
 8005d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d48:	3302      	adds	r3, #2
 8005d4a:	e7c7      	b.n	8005cdc <_printf_common+0x58>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	4622      	mov	r2, r4
 8005d50:	4649      	mov	r1, r9
 8005d52:	4638      	mov	r0, r7
 8005d54:	47c0      	blx	r8
 8005d56:	3001      	adds	r0, #1
 8005d58:	d0e6      	beq.n	8005d28 <_printf_common+0xa4>
 8005d5a:	3601      	adds	r6, #1
 8005d5c:	e7d9      	b.n	8005d12 <_printf_common+0x8e>
	...

08005d60 <_printf_i>:
 8005d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	7e0f      	ldrb	r7, [r1, #24]
 8005d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d68:	2f78      	cmp	r7, #120	; 0x78
 8005d6a:	4691      	mov	r9, r2
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	469a      	mov	sl, r3
 8005d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d76:	d807      	bhi.n	8005d88 <_printf_i+0x28>
 8005d78:	2f62      	cmp	r7, #98	; 0x62
 8005d7a:	d80a      	bhi.n	8005d92 <_printf_i+0x32>
 8005d7c:	2f00      	cmp	r7, #0
 8005d7e:	f000 80d4 	beq.w	8005f2a <_printf_i+0x1ca>
 8005d82:	2f58      	cmp	r7, #88	; 0x58
 8005d84:	f000 80c0 	beq.w	8005f08 <_printf_i+0x1a8>
 8005d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d90:	e03a      	b.n	8005e08 <_printf_i+0xa8>
 8005d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d96:	2b15      	cmp	r3, #21
 8005d98:	d8f6      	bhi.n	8005d88 <_printf_i+0x28>
 8005d9a:	a101      	add	r1, pc, #4	; (adr r1, 8005da0 <_printf_i+0x40>)
 8005d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da0:	08005df9 	.word	0x08005df9
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005d89 	.word	0x08005d89
 8005dac:	08005d89 	.word	0x08005d89
 8005db0:	08005d89 	.word	0x08005d89
 8005db4:	08005d89 	.word	0x08005d89
 8005db8:	08005e0d 	.word	0x08005e0d
 8005dbc:	08005d89 	.word	0x08005d89
 8005dc0:	08005d89 	.word	0x08005d89
 8005dc4:	08005d89 	.word	0x08005d89
 8005dc8:	08005d89 	.word	0x08005d89
 8005dcc:	08005f11 	.word	0x08005f11
 8005dd0:	08005e39 	.word	0x08005e39
 8005dd4:	08005ecb 	.word	0x08005ecb
 8005dd8:	08005d89 	.word	0x08005d89
 8005ddc:	08005d89 	.word	0x08005d89
 8005de0:	08005f33 	.word	0x08005f33
 8005de4:	08005d89 	.word	0x08005d89
 8005de8:	08005e39 	.word	0x08005e39
 8005dec:	08005d89 	.word	0x08005d89
 8005df0:	08005d89 	.word	0x08005d89
 8005df4:	08005ed3 	.word	0x08005ed3
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	1d1a      	adds	r2, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	602a      	str	r2, [r5, #0]
 8005e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e09f      	b.n	8005f4c <_printf_i+0x1ec>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	682b      	ldr	r3, [r5, #0]
 8005e10:	0607      	lsls	r7, r0, #24
 8005e12:	f103 0104 	add.w	r1, r3, #4
 8005e16:	6029      	str	r1, [r5, #0]
 8005e18:	d501      	bpl.n	8005e1e <_printf_i+0xbe>
 8005e1a:	681e      	ldr	r6, [r3, #0]
 8005e1c:	e003      	b.n	8005e26 <_printf_i+0xc6>
 8005e1e:	0646      	lsls	r6, r0, #25
 8005e20:	d5fb      	bpl.n	8005e1a <_printf_i+0xba>
 8005e22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e26:	2e00      	cmp	r6, #0
 8005e28:	da03      	bge.n	8005e32 <_printf_i+0xd2>
 8005e2a:	232d      	movs	r3, #45	; 0x2d
 8005e2c:	4276      	negs	r6, r6
 8005e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e32:	485a      	ldr	r0, [pc, #360]	; (8005f9c <_printf_i+0x23c>)
 8005e34:	230a      	movs	r3, #10
 8005e36:	e012      	b.n	8005e5e <_printf_i+0xfe>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	6820      	ldr	r0, [r4, #0]
 8005e3c:	1d19      	adds	r1, r3, #4
 8005e3e:	6029      	str	r1, [r5, #0]
 8005e40:	0605      	lsls	r5, r0, #24
 8005e42:	d501      	bpl.n	8005e48 <_printf_i+0xe8>
 8005e44:	681e      	ldr	r6, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <_printf_i+0xee>
 8005e48:	0641      	lsls	r1, r0, #25
 8005e4a:	d5fb      	bpl.n	8005e44 <_printf_i+0xe4>
 8005e4c:	881e      	ldrh	r6, [r3, #0]
 8005e4e:	4853      	ldr	r0, [pc, #332]	; (8005f9c <_printf_i+0x23c>)
 8005e50:	2f6f      	cmp	r7, #111	; 0x6f
 8005e52:	bf0c      	ite	eq
 8005e54:	2308      	moveq	r3, #8
 8005e56:	230a      	movne	r3, #10
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5e:	6865      	ldr	r5, [r4, #4]
 8005e60:	60a5      	str	r5, [r4, #8]
 8005e62:	2d00      	cmp	r5, #0
 8005e64:	bfa2      	ittt	ge
 8005e66:	6821      	ldrge	r1, [r4, #0]
 8005e68:	f021 0104 	bicge.w	r1, r1, #4
 8005e6c:	6021      	strge	r1, [r4, #0]
 8005e6e:	b90e      	cbnz	r6, 8005e74 <_printf_i+0x114>
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	d04b      	beq.n	8005f0c <_printf_i+0x1ac>
 8005e74:	4615      	mov	r5, r2
 8005e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7e:	5dc7      	ldrb	r7, [r0, r7]
 8005e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e84:	4637      	mov	r7, r6
 8005e86:	42bb      	cmp	r3, r7
 8005e88:	460e      	mov	r6, r1
 8005e8a:	d9f4      	bls.n	8005e76 <_printf_i+0x116>
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d10b      	bne.n	8005ea8 <_printf_i+0x148>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	07de      	lsls	r6, r3, #31
 8005e94:	d508      	bpl.n	8005ea8 <_printf_i+0x148>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	6861      	ldr	r1, [r4, #4]
 8005e9a:	4299      	cmp	r1, r3
 8005e9c:	bfde      	ittt	le
 8005e9e:	2330      	movle	r3, #48	; 0x30
 8005ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea8:	1b52      	subs	r2, r2, r5
 8005eaa:	6122      	str	r2, [r4, #16]
 8005eac:	f8cd a000 	str.w	sl, [sp]
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	aa03      	add	r2, sp, #12
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f7ff fee4 	bl	8005c84 <_printf_common>
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d14a      	bne.n	8005f56 <_printf_i+0x1f6>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	b004      	add	sp, #16
 8005ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	f043 0320 	orr.w	r3, r3, #32
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	4833      	ldr	r0, [pc, #204]	; (8005fa0 <_printf_i+0x240>)
 8005ed4:	2778      	movs	r7, #120	; 0x78
 8005ed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	6829      	ldr	r1, [r5, #0]
 8005ede:	061f      	lsls	r7, r3, #24
 8005ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ee4:	d402      	bmi.n	8005eec <_printf_i+0x18c>
 8005ee6:	065f      	lsls	r7, r3, #25
 8005ee8:	bf48      	it	mi
 8005eea:	b2b6      	uxthmi	r6, r6
 8005eec:	07df      	lsls	r7, r3, #31
 8005eee:	bf48      	it	mi
 8005ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ef4:	6029      	str	r1, [r5, #0]
 8005ef6:	bf48      	it	mi
 8005ef8:	6023      	strmi	r3, [r4, #0]
 8005efa:	b91e      	cbnz	r6, 8005f04 <_printf_i+0x1a4>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	f023 0320 	bic.w	r3, r3, #32
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	2310      	movs	r3, #16
 8005f06:	e7a7      	b.n	8005e58 <_printf_i+0xf8>
 8005f08:	4824      	ldr	r0, [pc, #144]	; (8005f9c <_printf_i+0x23c>)
 8005f0a:	e7e4      	b.n	8005ed6 <_printf_i+0x176>
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	e7bd      	b.n	8005e8c <_printf_i+0x12c>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	6826      	ldr	r6, [r4, #0]
 8005f14:	6961      	ldr	r1, [r4, #20]
 8005f16:	1d18      	adds	r0, r3, #4
 8005f18:	6028      	str	r0, [r5, #0]
 8005f1a:	0635      	lsls	r5, r6, #24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0x1c4>
 8005f20:	6019      	str	r1, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0x1ca>
 8005f24:	0670      	lsls	r0, r6, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0x1c0>
 8005f28:	8019      	strh	r1, [r3, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6123      	str	r3, [r4, #16]
 8005f2e:	4615      	mov	r5, r2
 8005f30:	e7bc      	b.n	8005eac <_printf_i+0x14c>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	1d1a      	adds	r2, r3, #4
 8005f36:	602a      	str	r2, [r5, #0]
 8005f38:	681d      	ldr	r5, [r3, #0]
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7fa f946 	bl	80001d0 <memchr>
 8005f44:	b108      	cbz	r0, 8005f4a <_printf_i+0x1ea>
 8005f46:	1b40      	subs	r0, r0, r5
 8005f48:	6060      	str	r0, [r4, #4]
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f54:	e7aa      	b.n	8005eac <_printf_i+0x14c>
 8005f56:	6923      	ldr	r3, [r4, #16]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	47d0      	blx	sl
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0ad      	beq.n	8005ec0 <_printf_i+0x160>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	079b      	lsls	r3, r3, #30
 8005f68:	d413      	bmi.n	8005f92 <_printf_i+0x232>
 8005f6a:	68e0      	ldr	r0, [r4, #12]
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	4298      	cmp	r0, r3
 8005f70:	bfb8      	it	lt
 8005f72:	4618      	movlt	r0, r3
 8005f74:	e7a6      	b.n	8005ec4 <_printf_i+0x164>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	47d0      	blx	sl
 8005f80:	3001      	adds	r0, #1
 8005f82:	d09d      	beq.n	8005ec0 <_printf_i+0x160>
 8005f84:	3501      	adds	r5, #1
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	9903      	ldr	r1, [sp, #12]
 8005f8a:	1a5b      	subs	r3, r3, r1
 8005f8c:	42ab      	cmp	r3, r5
 8005f8e:	dcf2      	bgt.n	8005f76 <_printf_i+0x216>
 8005f90:	e7eb      	b.n	8005f6a <_printf_i+0x20a>
 8005f92:	2500      	movs	r5, #0
 8005f94:	f104 0619 	add.w	r6, r4, #25
 8005f98:	e7f5      	b.n	8005f86 <_printf_i+0x226>
 8005f9a:	bf00      	nop
 8005f9c:	080063e5 	.word	0x080063e5
 8005fa0:	080063f6 	.word	0x080063f6

08005fa4 <__sflush_r>:
 8005fa4:	898a      	ldrh	r2, [r1, #12]
 8005fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005faa:	4605      	mov	r5, r0
 8005fac:	0710      	lsls	r0, r2, #28
 8005fae:	460c      	mov	r4, r1
 8005fb0:	d458      	bmi.n	8006064 <__sflush_r+0xc0>
 8005fb2:	684b      	ldr	r3, [r1, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dc05      	bgt.n	8005fc4 <__sflush_r+0x20>
 8005fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dc02      	bgt.n	8005fc4 <__sflush_r+0x20>
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	d0f9      	beq.n	8005fbe <__sflush_r+0x1a>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fd0:	682f      	ldr	r7, [r5, #0]
 8005fd2:	6a21      	ldr	r1, [r4, #32]
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	d032      	beq.n	800603e <__sflush_r+0x9a>
 8005fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	075a      	lsls	r2, r3, #29
 8005fde:	d505      	bpl.n	8005fec <__sflush_r+0x48>
 8005fe0:	6863      	ldr	r3, [r4, #4]
 8005fe2:	1ac0      	subs	r0, r0, r3
 8005fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fe6:	b10b      	cbz	r3, 8005fec <__sflush_r+0x48>
 8005fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fea:	1ac0      	subs	r0, r0, r3
 8005fec:	2300      	movs	r3, #0
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ff2:	6a21      	ldr	r1, [r4, #32]
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b0      	blx	r6
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	d106      	bne.n	800600c <__sflush_r+0x68>
 8005ffe:	6829      	ldr	r1, [r5, #0]
 8006000:	291d      	cmp	r1, #29
 8006002:	d82b      	bhi.n	800605c <__sflush_r+0xb8>
 8006004:	4a29      	ldr	r2, [pc, #164]	; (80060ac <__sflush_r+0x108>)
 8006006:	410a      	asrs	r2, r1
 8006008:	07d6      	lsls	r6, r2, #31
 800600a:	d427      	bmi.n	800605c <__sflush_r+0xb8>
 800600c:	2200      	movs	r2, #0
 800600e:	6062      	str	r2, [r4, #4]
 8006010:	04d9      	lsls	r1, r3, #19
 8006012:	6922      	ldr	r2, [r4, #16]
 8006014:	6022      	str	r2, [r4, #0]
 8006016:	d504      	bpl.n	8006022 <__sflush_r+0x7e>
 8006018:	1c42      	adds	r2, r0, #1
 800601a:	d101      	bne.n	8006020 <__sflush_r+0x7c>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b903      	cbnz	r3, 8006022 <__sflush_r+0x7e>
 8006020:	6560      	str	r0, [r4, #84]	; 0x54
 8006022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006024:	602f      	str	r7, [r5, #0]
 8006026:	2900      	cmp	r1, #0
 8006028:	d0c9      	beq.n	8005fbe <__sflush_r+0x1a>
 800602a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800602e:	4299      	cmp	r1, r3
 8006030:	d002      	beq.n	8006038 <__sflush_r+0x94>
 8006032:	4628      	mov	r0, r5
 8006034:	f7ff fbea 	bl	800580c <_free_r>
 8006038:	2000      	movs	r0, #0
 800603a:	6360      	str	r0, [r4, #52]	; 0x34
 800603c:	e7c0      	b.n	8005fc0 <__sflush_r+0x1c>
 800603e:	2301      	movs	r3, #1
 8006040:	4628      	mov	r0, r5
 8006042:	47b0      	blx	r6
 8006044:	1c41      	adds	r1, r0, #1
 8006046:	d1c8      	bne.n	8005fda <__sflush_r+0x36>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0c5      	beq.n	8005fda <__sflush_r+0x36>
 800604e:	2b1d      	cmp	r3, #29
 8006050:	d001      	beq.n	8006056 <__sflush_r+0xb2>
 8006052:	2b16      	cmp	r3, #22
 8006054:	d101      	bne.n	800605a <__sflush_r+0xb6>
 8006056:	602f      	str	r7, [r5, #0]
 8006058:	e7b1      	b.n	8005fbe <__sflush_r+0x1a>
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006060:	81a3      	strh	r3, [r4, #12]
 8006062:	e7ad      	b.n	8005fc0 <__sflush_r+0x1c>
 8006064:	690f      	ldr	r7, [r1, #16]
 8006066:	2f00      	cmp	r7, #0
 8006068:	d0a9      	beq.n	8005fbe <__sflush_r+0x1a>
 800606a:	0793      	lsls	r3, r2, #30
 800606c:	680e      	ldr	r6, [r1, #0]
 800606e:	bf08      	it	eq
 8006070:	694b      	ldreq	r3, [r1, #20]
 8006072:	600f      	str	r7, [r1, #0]
 8006074:	bf18      	it	ne
 8006076:	2300      	movne	r3, #0
 8006078:	eba6 0807 	sub.w	r8, r6, r7
 800607c:	608b      	str	r3, [r1, #8]
 800607e:	f1b8 0f00 	cmp.w	r8, #0
 8006082:	dd9c      	ble.n	8005fbe <__sflush_r+0x1a>
 8006084:	6a21      	ldr	r1, [r4, #32]
 8006086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006088:	4643      	mov	r3, r8
 800608a:	463a      	mov	r2, r7
 800608c:	4628      	mov	r0, r5
 800608e:	47b0      	blx	r6
 8006090:	2800      	cmp	r0, #0
 8006092:	dc06      	bgt.n	80060a2 <__sflush_r+0xfe>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	e78e      	b.n	8005fc0 <__sflush_r+0x1c>
 80060a2:	4407      	add	r7, r0
 80060a4:	eba8 0800 	sub.w	r8, r8, r0
 80060a8:	e7e9      	b.n	800607e <__sflush_r+0xda>
 80060aa:	bf00      	nop
 80060ac:	dfbffffe 	.word	0xdfbffffe

080060b0 <_fflush_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	4605      	mov	r5, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	b913      	cbnz	r3, 80060c0 <_fflush_r+0x10>
 80060ba:	2500      	movs	r5, #0
 80060bc:	4628      	mov	r0, r5
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	b118      	cbz	r0, 80060ca <_fflush_r+0x1a>
 80060c2:	6a03      	ldr	r3, [r0, #32]
 80060c4:	b90b      	cbnz	r3, 80060ca <_fflush_r+0x1a>
 80060c6:	f7ff fa9b 	bl	8005600 <__sinit>
 80060ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f3      	beq.n	80060ba <_fflush_r+0xa>
 80060d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060d4:	07d0      	lsls	r0, r2, #31
 80060d6:	d404      	bmi.n	80060e2 <_fflush_r+0x32>
 80060d8:	0599      	lsls	r1, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_fflush_r+0x32>
 80060dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060de:	f7ff fb93 	bl	8005808 <__retarget_lock_acquire_recursive>
 80060e2:	4628      	mov	r0, r5
 80060e4:	4621      	mov	r1, r4
 80060e6:	f7ff ff5d 	bl	8005fa4 <__sflush_r>
 80060ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ec:	07da      	lsls	r2, r3, #31
 80060ee:	4605      	mov	r5, r0
 80060f0:	d4e4      	bmi.n	80060bc <_fflush_r+0xc>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	059b      	lsls	r3, r3, #22
 80060f6:	d4e1      	bmi.n	80060bc <_fflush_r+0xc>
 80060f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fa:	f7ff fb86 	bl	800580a <__retarget_lock_release_recursive>
 80060fe:	e7dd      	b.n	80060bc <_fflush_r+0xc>

08006100 <__swbuf_r>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	460e      	mov	r6, r1
 8006104:	4614      	mov	r4, r2
 8006106:	4605      	mov	r5, r0
 8006108:	b118      	cbz	r0, 8006112 <__swbuf_r+0x12>
 800610a:	6a03      	ldr	r3, [r0, #32]
 800610c:	b90b      	cbnz	r3, 8006112 <__swbuf_r+0x12>
 800610e:	f7ff fa77 	bl	8005600 <__sinit>
 8006112:	69a3      	ldr	r3, [r4, #24]
 8006114:	60a3      	str	r3, [r4, #8]
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	071a      	lsls	r2, r3, #28
 800611a:	d525      	bpl.n	8006168 <__swbuf_r+0x68>
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	b31b      	cbz	r3, 8006168 <__swbuf_r+0x68>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	6922      	ldr	r2, [r4, #16]
 8006124:	1a98      	subs	r0, r3, r2
 8006126:	6963      	ldr	r3, [r4, #20]
 8006128:	b2f6      	uxtb	r6, r6
 800612a:	4283      	cmp	r3, r0
 800612c:	4637      	mov	r7, r6
 800612e:	dc04      	bgt.n	800613a <__swbuf_r+0x3a>
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff ffbc 	bl	80060b0 <_fflush_r>
 8006138:	b9e0      	cbnz	r0, 8006174 <__swbuf_r+0x74>
 800613a:	68a3      	ldr	r3, [r4, #8]
 800613c:	3b01      	subs	r3, #1
 800613e:	60a3      	str	r3, [r4, #8]
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	6022      	str	r2, [r4, #0]
 8006146:	701e      	strb	r6, [r3, #0]
 8006148:	6962      	ldr	r2, [r4, #20]
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	429a      	cmp	r2, r3
 800614e:	d004      	beq.n	800615a <__swbuf_r+0x5a>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	07db      	lsls	r3, r3, #31
 8006154:	d506      	bpl.n	8006164 <__swbuf_r+0x64>
 8006156:	2e0a      	cmp	r6, #10
 8006158:	d104      	bne.n	8006164 <__swbuf_r+0x64>
 800615a:	4621      	mov	r1, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f7ff ffa7 	bl	80060b0 <_fflush_r>
 8006162:	b938      	cbnz	r0, 8006174 <__swbuf_r+0x74>
 8006164:	4638      	mov	r0, r7
 8006166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f806 	bl	800617c <__swsetup_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	d0d5      	beq.n	8006120 <__swbuf_r+0x20>
 8006174:	f04f 37ff 	mov.w	r7, #4294967295
 8006178:	e7f4      	b.n	8006164 <__swbuf_r+0x64>
	...

0800617c <__swsetup_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <__swsetup_r+0xac>)
 8006180:	4605      	mov	r5, r0
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	460c      	mov	r4, r1
 8006186:	b118      	cbz	r0, 8006190 <__swsetup_r+0x14>
 8006188:	6a03      	ldr	r3, [r0, #32]
 800618a:	b90b      	cbnz	r3, 8006190 <__swsetup_r+0x14>
 800618c:	f7ff fa38 	bl	8005600 <__sinit>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006196:	0718      	lsls	r0, r3, #28
 8006198:	d422      	bmi.n	80061e0 <__swsetup_r+0x64>
 800619a:	06d9      	lsls	r1, r3, #27
 800619c:	d407      	bmi.n	80061ae <__swsetup_r+0x32>
 800619e:	2309      	movs	r3, #9
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	e034      	b.n	8006218 <__swsetup_r+0x9c>
 80061ae:	0758      	lsls	r0, r3, #29
 80061b0:	d512      	bpl.n	80061d8 <__swsetup_r+0x5c>
 80061b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061b4:	b141      	cbz	r1, 80061c8 <__swsetup_r+0x4c>
 80061b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d002      	beq.n	80061c4 <__swsetup_r+0x48>
 80061be:	4628      	mov	r0, r5
 80061c0:	f7ff fb24 	bl	800580c <_free_r>
 80061c4:	2300      	movs	r3, #0
 80061c6:	6363      	str	r3, [r4, #52]	; 0x34
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	2300      	movs	r3, #0
 80061d2:	6063      	str	r3, [r4, #4]
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f043 0308 	orr.w	r3, r3, #8
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	b94b      	cbnz	r3, 80061f8 <__swsetup_r+0x7c>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ee:	d003      	beq.n	80061f8 <__swsetup_r+0x7c>
 80061f0:	4621      	mov	r1, r4
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 f850 	bl	8006298 <__smakebuf_r>
 80061f8:	89a0      	ldrh	r0, [r4, #12]
 80061fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061fe:	f010 0301 	ands.w	r3, r0, #1
 8006202:	d00a      	beq.n	800621a <__swsetup_r+0x9e>
 8006204:	2300      	movs	r3, #0
 8006206:	60a3      	str	r3, [r4, #8]
 8006208:	6963      	ldr	r3, [r4, #20]
 800620a:	425b      	negs	r3, r3
 800620c:	61a3      	str	r3, [r4, #24]
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	b943      	cbnz	r3, 8006224 <__swsetup_r+0xa8>
 8006212:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006216:	d1c4      	bne.n	80061a2 <__swsetup_r+0x26>
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	0781      	lsls	r1, r0, #30
 800621c:	bf58      	it	pl
 800621e:	6963      	ldrpl	r3, [r4, #20]
 8006220:	60a3      	str	r3, [r4, #8]
 8006222:	e7f4      	b.n	800620e <__swsetup_r+0x92>
 8006224:	2000      	movs	r0, #0
 8006226:	e7f7      	b.n	8006218 <__swsetup_r+0x9c>
 8006228:	20000064 	.word	0x20000064

0800622c <_sbrk_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	; (8006248 <_sbrk_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fa fce6 	bl	8000c08 <_sbrk>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_sbrk_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_sbrk_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	200002ec 	.word	0x200002ec

0800624c <__swhatbuf_r>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	460c      	mov	r4, r1
 8006250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006254:	2900      	cmp	r1, #0
 8006256:	b096      	sub	sp, #88	; 0x58
 8006258:	4615      	mov	r5, r2
 800625a:	461e      	mov	r6, r3
 800625c:	da0d      	bge.n	800627a <__swhatbuf_r+0x2e>
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	bf0c      	ite	eq
 800626a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800626e:	2340      	movne	r3, #64	; 0x40
 8006270:	2000      	movs	r0, #0
 8006272:	6031      	str	r1, [r6, #0]
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	b016      	add	sp, #88	; 0x58
 8006278:	bd70      	pop	{r4, r5, r6, pc}
 800627a:	466a      	mov	r2, sp
 800627c:	f000 f848 	bl	8006310 <_fstat_r>
 8006280:	2800      	cmp	r0, #0
 8006282:	dbec      	blt.n	800625e <__swhatbuf_r+0x12>
 8006284:	9901      	ldr	r1, [sp, #4]
 8006286:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800628a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800628e:	4259      	negs	r1, r3
 8006290:	4159      	adcs	r1, r3
 8006292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006296:	e7eb      	b.n	8006270 <__swhatbuf_r+0x24>

08006298 <__smakebuf_r>:
 8006298:	898b      	ldrh	r3, [r1, #12]
 800629a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800629c:	079d      	lsls	r5, r3, #30
 800629e:	4606      	mov	r6, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	d507      	bpl.n	80062b4 <__smakebuf_r+0x1c>
 80062a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	2301      	movs	r3, #1
 80062ae:	6163      	str	r3, [r4, #20]
 80062b0:	b002      	add	sp, #8
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	ab01      	add	r3, sp, #4
 80062b6:	466a      	mov	r2, sp
 80062b8:	f7ff ffc8 	bl	800624c <__swhatbuf_r>
 80062bc:	9900      	ldr	r1, [sp, #0]
 80062be:	4605      	mov	r5, r0
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff fb0f 	bl	80058e4 <_malloc_r>
 80062c6:	b948      	cbnz	r0, 80062dc <__smakebuf_r+0x44>
 80062c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062cc:	059a      	lsls	r2, r3, #22
 80062ce:	d4ef      	bmi.n	80062b0 <__smakebuf_r+0x18>
 80062d0:	f023 0303 	bic.w	r3, r3, #3
 80062d4:	f043 0302 	orr.w	r3, r3, #2
 80062d8:	81a3      	strh	r3, [r4, #12]
 80062da:	e7e3      	b.n	80062a4 <__smakebuf_r+0xc>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	6020      	str	r0, [r4, #0]
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	9b00      	ldr	r3, [sp, #0]
 80062e8:	6163      	str	r3, [r4, #20]
 80062ea:	9b01      	ldr	r3, [sp, #4]
 80062ec:	6120      	str	r0, [r4, #16]
 80062ee:	b15b      	cbz	r3, 8006308 <__smakebuf_r+0x70>
 80062f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062f4:	4630      	mov	r0, r6
 80062f6:	f000 f81d 	bl	8006334 <_isatty_r>
 80062fa:	b128      	cbz	r0, 8006308 <__smakebuf_r+0x70>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	431d      	orrs	r5, r3
 800630c:	81a5      	strh	r5, [r4, #12]
 800630e:	e7cf      	b.n	80062b0 <__smakebuf_r+0x18>

08006310 <_fstat_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	; (8006330 <_fstat_r+0x20>)
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	f7fa fc4a 	bl	8000bb6 <_fstat>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d102      	bne.n	800632c <_fstat_r+0x1c>
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	b103      	cbz	r3, 800632c <_fstat_r+0x1c>
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	bf00      	nop
 8006330:	200002ec 	.word	0x200002ec

08006334 <_isatty_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d06      	ldr	r5, [pc, #24]	; (8006350 <_isatty_r+0x1c>)
 8006338:	2300      	movs	r3, #0
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	f7fa fc49 	bl	8000bd6 <_isatty>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_isatty_r+0x1a>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_isatty_r+0x1a>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	200002ec 	.word	0x200002ec

08006354 <_init>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr

08006360 <_fini>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr
